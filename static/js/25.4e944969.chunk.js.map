{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useApproveConfirmTransaction.ts","components/FoldableSection/FoldableText.tsx","views/Home/components/ColoredWordHeading.tsx","views/Home/components/SlideSvg.tsx","views/PancakeSquad/types.ts","views/PancakeSquad/styles.tsx","views/PancakeSquad/components/ArtistSection/config.tsx","views/PancakeSquad/components/ArtistSection/styles.tsx","views/PancakeSquad/assets/ArtistBottomWave.tsx","views/PancakeSquad/assets/TriangleBio.tsx","views/PancakeSquad/components/ArtistSection/index.tsx","views/PancakeSquad/components/BunniesSection/config.ts","views/PancakeSquad/components/BunniesSection/styles.tsx","views/PancakeSquad/components/BunniesSection/BunniesImages.tsx","views/PancakeSquad/components/BunniesSection/index.tsx","views/PancakeSquad/components/EventDescriptionSection/config.tsx","views/PancakeSquad/components/EventDescriptionSection/styles.tsx","views/PancakeSquad/components/EventDescriptionSection/index.tsx","views/PancakeSquad/assets/EventStepsBottomWave.tsx","views/PancakeSquad/assets/EventStepsTopWave.tsx","views/PancakeSquad/components/Buttons/ActivateProfile.tsx","views/PancakeSquad/components/Buttons/types.ts","views/PancakeSquad/context.tsx","views/PancakeSquad/components/Modals/BuyTickets/index.tsx","views/PancakeSquad/components/Modals/Confirm/index.tsx","views/PancakeSquad/components/Header/ReadyText.tsx","views/PancakeSquad/components/Buttons/utils.ts","views/PancakeSquad/components/Header/types.ts","views/PancakeSquad/components/Buttons/BuyTickets.tsx","views/PancakeSquad/components/Buttons/EndEvent.tsx","views/PancakeSquad/components/Buttons/Mint.tsx","utils/formatTimePeriod.ts","views/PancakeSquad/utils.ts","views/PancakeSquad/components/EventStepsSection/utils.ts","views/PancakeSquad/components/EventStepsSection/config.tsx","views/PancakeSquad/components/EventStepsSection/styles.tsx","views/PancakeSquad/components/EventStepsSection/index.tsx","views/PancakeSquad/components/FaqSection/config.tsx","views/PancakeSquad/components/FaqSection/styles.tsx","views/PancakeSquad/components/FaqSection/index.tsx","views/PancakeSquad/assets/HeaderBottomWave.tsx","views/PancakeSquad/config.ts","views/PancakeSquad/components/Header/utils.ts","views/PancakeSquad/components/Header/CtaButtons.tsx","views/PancakeSquad/components/Header/MintText.tsx","views/PancakeSquad/components/Header/PreEventText.tsx","views/PancakeSquad/components/Header/SaleProgress.tsx","views/PancakeSquad/components/Header/styles.tsx","views/PancakeSquad/components/Header/index.tsx","views/PancakeSquad/hooks/useEventInfos.tsx","views/PancakeSquad/hooks/useUserInfos.tsx","views/PancakeSquad/index.tsx"],"names":["FetchStatus","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","useState","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","contract","getBep20Contract","balanceOf","res","BigNumber","toString","console","error","prev","fetchBalance","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","setBalance","useGetBnbBalance","setFetchStatus","ethers","from","useLastUpdated","lastUpdated","setLastUpdated","simpleRpcProvider","getBalance","walletBalance","refresh","useGetCakeBalance","tokens","cake","address","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","t","useTranslation","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","hasApproveFailed","hasConfirmFailed","handleApprove","tx","wait","receipt","status","handleConfirm","params","Wrapper","styled","Flex","StyledExpandableLabelWrapper","StyledChildrenFlex","isExpanded","theme","colors","inputSecondary","FoldableText","title","children","props","setIsExpanded","flexDirection","onClick","justifyContent","alignItems","pb","fontWeight","expanded","ColoredWordHeading","text","firstColor","mb","useTheme","split","firstWord","remainingWords","slice","join","displayedColor","secondary","scale","style","color","SlideSvgLight","viewBox","d","fill","id","x1","y1","x2","y2","gradientUnits","stopColor","stopOpacity","offset","SlideSvgDark","SaleStatusEnum","UserStatusEnum","StyledSquadContainer","Box","LandingBodyWrapper","mediaQueries","md","StyledWaveContainer","artistConfigBuilder","isDark","headingText","bodyText","buttons","to","external","icon","fillColor","image","src","alt","StyledArtistSectionContainer","$isDark","StyledArtistBioContainer","invertedContrast","shadows","level1","StyledSocialButton","Link","Icon","preserveAspectRatio","xmlns","ArtistSection","py","maxWidth","ml","alignSelf","fontSize","mr","bold","as","map","TriangleBio","mx","button","href","width","startIcon","bottom","ArtistBottomWave","bunniesConfig","subHeadingText","primaryButton","images","basePath","StyledBunnySectionContainer","gradients","bubblegum","StyledImageContainer","StyledBunnyImage","img","$isSelected","StyledTextContainer","BunniesImages","altText","bunnies","Array","selectedBunny","setSelectedBunny","timeoutId","setTimeout","clearTimeout","height","_","index","BunniesSection","pt","position","SlideSvg","eventDescriptionConfigBuilder","bodyTextHeader","content","display","isDisplayed","accessoriesImages","flyingAnim","keyframes","StyledEventDescriptionSectionContainer","background","StyledBodyTextList","lightColors","textSubtle","StyledBodyTextElement","StyledBunnyAccessoriesContainer","StyledBunnyAccessory","EventDescriptionSection","flex","order","variant","accessory","BuyButtonsEnum","ActivateProfileButton","userStatus","NO_PROFILE","UNCONNECTED","PancakeSquadContext","React","createContext","isUserEnabled","setIsUserEnabled","BuyTicketsModal","onDismiss","buyTicketCallBack","headerBackground","saleStatus","cakeBalance","pricePerTicket","maxPerAddress","maxPerTransaction","numberTicketsForGen0","numberTicketsOfUser","numberTicketsUsedForGen0","ticketsNumber","setTicketsNumber","remainingTickets","Presale","isCakeBalanceInsufficient","lt","maxBuyTickets","Math","min","div","toNumber","totalCost","mul","maxBuyButtons","buyButtons","minWidth","px","textTransform","disabled","formatBigNumber","borderBottom","cardBorder","borderTop","mt","ConfirmModal","onConfirmClose","isLoading","txHash","loadingText","loadingButtonLabel","successButtonLabel","chainId","useActiveWeb3React","onCloseCallback","size","getBscScanLink","truncateHash","ReadyText","ButtonsEnum","getBuyButtonText","canBuyTickets","Sale","BuyTicketsButtons","canClaimForGen0","startTimestamp","txHashEnablingResult","setTxHashEnablingResult","txHashBuyingResult","setTxHashBuyingResult","callWithGasPrice","useCallWithGasPrice","nftSaleContract","useNftSaleContract","toastSuccess","useCake","useContext","canBuySaleTicket","isPreSale","isGen0User","PROFILE_ACTIVE_GEN0","isUserReady","PROFILE_ACTIVE","Pending","allowance","response","currentAllowance","ethersToBigNumber","gt","constants","MaxUint256","transactionHash","onPresentConfirmModal","useModal","Confirm","cardHeader","onPresentEnableModal","onDismissEnableModal","BuyTickets","onPresentBuyTicketsModal","onDismissBuyTicketsModal","buyButton","now","Date","READY","FIFTEEN_MINUTES","BUY","NONE","ENABLE","getBuyButton","EndEventButtons","numberTokensOfUser","maxSupply","totalSupplyMinted","hasSquad","Claim","canViewMarket","MintButton","ticketsOfUser","setIsLoading","txHashMintingResult","setTxHashMintingResult","canMintTickets","mintTokenCallBack","endIcon","spin","undefined","tickets","formatTimePeriod","periods","excludePeriods","textArr","Object","keys","forEach","period","includes","push","substr","length","eventTextMapping","Premint","DrawingRandomness","getEventStepStatus","eventStatus","every","some","getTimePeriodFromTimeStamp","timestampOffsetInSeconds","nowInSeconds","startTimestampInSeconds","timePeriods","getTimePeriods","round","getEventText","eventStepStatus","getAltText","eventStatusMapping","past","live","upcoming","getStepperStatus","currentSaleStatus","hasProfileActivated","isLastPhase","stepsConfigBuilder","userInfos","eventInfos","totalTicketsDistributed","isBuyPhaseFinished","isMintingFinished","hasData","ActivateProfile","target","Mint","EndEvent","StyledEventStepsSectionContainer","StyledBunniesSquadImg","EventStepsSection","stepsConfig","top","EventStepsTopWave","textAlign","step","statusFirstPart","statusSecondPart","EventStepsBottomWave","config","description","StyledFaqSection","StyledDetailsWrapper","FaqSection","Text","configBuilder","i","desc","nftSaleConfigBuilder","infoText","CtaButtons","buttonType","isBuyingFinished","MINT","END","ACTIVATE","getCurrentButton","MintText","isUserUnconnected","hasNoTicketOrToken","warning","failure","preEventTextMapping","PreEventText","darkColors","saleProgressTextMapping","remaining","total","data","SaleProgress","displaySaleProgress","isClaimingPhase","supplyRemainingPercentage","isMintCompleted","primaryStep","useDark","StyledSquadHeaderContainer","StyledSquadTitle","StyledSquadEventBorder","StyledSquadEventContainer","PancakeSquadHeader","displayEventBlock","my","minCost","maxPerWallet","m","p","events","ConnectWalletButton","HeaderBottomWave","useEventInfos","refreshCounter","setCallback","fetchEventInfos","nftSaleAddress","getNftSaleAddress","pancakeSquadContract","getPancakeSquadContract","calls","method","name","multicallv2","nftSaleAbi","currentMaxSupply","currentMaxPerAddress","currentPricePerTicket","currentMaxPerTransaction","currentTotalTicketsDistributed","currentStartTimestamp","currentTotalSupplyMinted","Number","padEnd","useUserInfos","fetchUserInfos","currentCanClaimForGen0","currentNumberTicketsForGen0","currentNumberTicketsUsedForGen0","currentNumberTicketsOfUser","currentTicketsOfUser","currentNumberTokensOfUser","PancakeSquad","useProfile","hasProfile","isInitialized","setEventInfo","setUserInfos","setRefreshCounter","hasActiveProfile","hasGen0","getUserStatus","interval","setInterval","clearInterval","Provider","value"],"mappings":"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","file":"static/js/25.4e944969.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport tokens from 'config/constants/tokens'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n  const [balance, setBalance] = useState(ethers.BigNumber.from(0))\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        const walletBalance = await simpleRpcProvider.getBalance(account)\n        setBalance(walletBalance)\n        setFetchStatus(FetchStatus.SUCCESS)\n      } catch {\n        setFetchStatus(FetchStatus.FAILED)\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance, setFetchStatus])\n\n  return { balance, fetchStatus, refresh: setLastUpdated }\n}\n\nexport const useGetCakeBalance = () => {\n  const { balance, fetchStatus } = useTokenBalance(tokens.cake.address)\n\n  // TODO: Remove ethers conversion once useTokenBalance is converted to ethers.BigNumber\n  return { balance: ethers.BigNumber.from(balance.toString()), fetchStatus }\n}\n\nexport default useTokenBalance\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    hasApproveFailed: state.approvalState === 'fail',\n    hasConfirmFailed: state.confirmState === 'fail',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async (params = {}) => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm(params)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { ExpandableLabel, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FoldableTextProps extends FlexProps {\n  title?: string\n}\n\nconst Wrapper = styled(Flex)`\n  cursor: pointer;\n`\n\nconst StyledExpandableLabelWrapper = styled(Flex)`\n  button {\n    align-items: center;\n    justify-content: flex-start;\n  }\n`\n\nconst StyledChildrenFlex = styled(Flex)<{ isExpanded?: boolean }>`\n  overflow: hidden;\n  height: ${({ isExpanded }) => (isExpanded ? '100%' : '0px')};\n  padding-bottom: ${({ isExpanded }) => (isExpanded ? '16px' : '0px')};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n`\n\nconst FoldableText: React.FC<FoldableTextProps> = ({ title, children, ...props }) => {\n  const { t } = useTranslation()\n  const [isExpanded, setIsExpanded] = useState(false)\n\n  return (\n    <Wrapper {...props} flexDirection=\"column\" onClick={() => setIsExpanded(!isExpanded)}>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" pb=\"16px\">\n        <Text fontWeight=\"bold\">{title}</Text>\n        <StyledExpandableLabelWrapper>\n          <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n            {isExpanded ? t('Hide') : t('Details')}\n          </ExpandableLabel>\n        </StyledExpandableLabelWrapper>\n      </Flex>\n      <StyledChildrenFlex isExpanded={isExpanded} flexDirection=\"column\">\n        {children}\n      </StyledChildrenFlex>\n    </Wrapper>\n  )\n}\n\nexport default FoldableText\n","import React from 'react'\nimport { Colors, Heading, TextProps } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\ninterface HeadingProps extends TextProps {\n  text: string\n  firstColor?: keyof Colors\n}\n\nconst ColoredWordHeading: React.FC<HeadingProps> = ({ text, firstColor, mb = '24px', ...props }) => {\n  const { theme } = useTheme()\n  const split = text.split(' ')\n  const firstWord = split[0]\n  const remainingWords = split.slice(1).join(' ')\n  const displayedColor = (theme.colors[firstColor] as string) ?? theme.colors.secondary\n\n  return (\n    <Heading scale=\"xl\" mb={mb} {...props}>\n      <span style={{ color: displayedColor }}>{firstWord} </span>\n      {remainingWords}\n    </Heading>\n  )\n}\n\nexport default ColoredWordHeading\n","import React from 'react'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\nexport const SlideSvgLight: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 1660 339\" {...props}>\n      <path\n        d=\"M804 167.023C520.5 167.023 267.5 290.522 0 304.5V339H1660V0.5C1358.83 0.5 1104 167.023 804 167.023Z\"\n        fill=\"url(#paint0_linear_light)\"\n      />\n      <defs>\n        <linearGradient id=\"paint0_linear_light\" x1=\"830\" y1=\"84\" x2=\"830\" y2=\"339\" gradientUnits=\"userSpaceOnUse\">\n          <stop stopColor=\"white\" stopOpacity=\"0.48\" />\n          <stop offset=\"0.566389\" stopColor=\"white\" stopOpacity=\"0.35\" />\n          <stop offset=\"1\" stopColor=\"white\" />\n        </linearGradient>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const SlideSvgDark: React.FC<SvgProps> = (props) => {\n  return (\n    <Svg viewBox=\"0 0 1660 339\" {...props}>\n      <path\n        d=\"M804 166.523C520.5 166.523 267.5 290.022 0 304V338.5H1660V0C1358.83 0 1104 166.523 804 166.523Z\"\n        fill=\"url(#paint0_linear_dark)\"\n      />\n      <defs>\n        <linearGradient id=\"paint0_linear_dark\" x1=\"830\" y1=\"83.5\" x2=\"830\" y2=\"338.5\" gradientUnits=\"userSpaceOnUse\">\n          <stop stopColor=\"#08060B\" stopOpacity=\"0.2\" />\n          <stop offset=\"0.545554\" stopColor=\"#08060B\" stopOpacity=\"0.5\" />\n          <stop offset=\"1\" stopColor=\"#08060B\" />\n        </linearGradient>\n      </defs>\n    </Svg>\n  )\n}\n","import { BigNumber } from 'ethers'\n\nexport enum SaleStatusEnum {\n  Pending, // Contract is deployed\n  Premint, // Tickets are preminted by owner\n  Presale, // Tickets are preminted by Gen0 users\n  Sale, // Tickets are for sold in general sale\n  DrawingRandomness, // Randomness has been drawn\n  Claim, // Tickets can be claimed for the token\n}\n\nexport enum UserStatusEnum {\n  UNCONNECTED,\n  NO_PROFILE,\n  PROFILE_ACTIVE,\n  PROFILE_ACTIVE_GEN0,\n}\n\nexport type EventInfos = {\n  maxSupply: number\n  maxPerAddress: number\n  maxPerTransaction: number\n  pricePerTicket: BigNumber\n  totalTicketsDistributed: number\n  saleStatus: SaleStatusEnum\n  totalSupplyMinted: number\n  startTimestamp: number\n}\n\nexport type UserInfos = {\n  canClaimForGen0: boolean\n  numberTicketsForGen0: number\n  numberTicketsUsedForGen0: number\n  numberTicketsOfUser: number\n  ticketsOfUser: BigNumber[]\n  numberTokensOfUser: number\n}\n","import { Box, Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledSquadContainer = styled(Box)`\n  min-height: 100vh;\n  background-color: #e6feff;\n`\n\nexport const LandingBodyWrapper = styled(Flex)`\n  max-width: 1200px;\n  width: 100%;\n  margin: 0 16px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin: 0 40px;\n  }\n`\n\nexport const StyledWaveContainer = styled(Box)`\n  position: absolute;\n  width: 100%;\n\n  & > svg {\n    max-height: 16px;\n    position: relative;\n    width: 100%;\n    height: 100%;\n    z-index: 5;\n  }\n`\n","import React from 'react'\nimport { InstagramIcon, TwitterIcon } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\n\ntype ArtistConfigType = {\n  t: ContextApi['t']\n  isDark: boolean\n}\n\nconst artistConfigBuilder = ({ t, isDark }: ArtistConfigType) => ({\n  headingText: t('Meet the Artist'),\n  bodyText: [\n    t('The birthplace of Cecy is truly unknown'),\n    t('But legend tells us, she was sailing alone'),\n    t('Beyond the mountains, across the sea'),\n    t('When she found an island, said “this is for me!”'),\n    t('‘Twas full of rabbits, who caught her attention'),\n    t('Making neat stuff beyond her comprehension'),\n    t('The bunnies were working in a big ol’ kitchen'),\n    t('Cooking hot pancakes for their big ol’ mission:'),\n    t('To drizzle in syrup and hand them out soon'),\n    t('So that bunnies worldwide may fly to the moon.'),\n  ],\n  buttons: [\n    {\n      to: 'https://twitter.com/cecymeade',\n      text: t('Follow on Twitter'),\n      external: true,\n      icon: <TwitterIcon fillColor=\"white\" />,\n    },\n    {\n      to: 'https://www.instagram.com/cecymeade/',\n      text: t('Follow on Instagram'),\n      external: true,\n      icon: <InstagramIcon color=\"white\" />,\n    },\n  ],\n  image: { src: `/images/pancakeSquad/artist${isDark ? '-dark' : ''}.png`, alt: 'Chef Cecy bio' },\n})\n\nexport default artistConfigBuilder\n","import { Flex, Link } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledArtistSectionContainer = styled(Flex)<{ $isDark: boolean }>`\n  position: relative;\n  background: ${({ $isDark }) =>\n    $isDark\n      ? `linear-gradient(90deg, #313D5C 0%, #3D2A54 100%);`\n      : `linear-gradient(90deg, #faf9fa 0%, #d7caec 100%);`};\n`\n\nexport const StyledArtistBioContainer = styled(Flex)`\n  position: relative;\n  padding: 48px 36px;\n  border-radius: 56px;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  box-shadow: ${({ theme }) => theme.shadows.level1};\n\n  & > svg {\n    position: absolute;\n    width: 20px;\n    height: 85px;\n    left: calc(50% - 10px);\n    top: -51px;\n    transform: rotate(90deg);\n\n    ${({ theme }) => theme.mediaQueries.md} {\n      left: -19px;\n      top: calc(50% - 42px);\n      transform: none;\n    }\n  }\n`\n\nexport const StyledSocialButton = styled(Link)`\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: fit-content;\n  }\n`\n","import * as React from 'react'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\nconst Icon: React.FC<SvgProps & { isDark: boolean }> = ({ isDark, ...props }) => {\n  return (\n    <Svg viewBox=\"0 0 1280 17\" preserveAspectRatio=\"none\" {...props}>\n      <path\n        d=\"M0 16.002v-16c159.43 9.206 387.163 14.966 640 14.966s480.57-5.76 640-14.966v16H0z\"\n        fill={isDark ? '#08060B' : '#FAF9FA'}\n      />\n    </Svg>\n  )\n}\n\nexport default Icon\n","import { Svg, SvgProps } from '@pancakeswap/uikit'\nimport * as React from 'react'\n\nconst Icon: React.FC<SvgProps & { isDark: boolean }> = ({ isDark, ...props }) => {\n  return (\n    <Svg viewBox=\"0 0 21 47\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n      <path\n        d=\"M1.416 24.914L17.66 41.157a8 8 0 012.343 5.657V.186a8 8 0 01-2.343 5.657L1.416 22.086a2 2 0 000 2.828z\"\n        fill={isDark ? '#000' : '#fff'}\n      />\n    </Svg>\n  )\n}\n\nexport default Icon\n","import React from 'react'\nimport { Box, Button, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LandingBodyWrapper, StyledWaveContainer } from 'views/PancakeSquad/styles'\nimport { useTheme } from 'styled-components'\nimport artistConfigBuilder from './config'\nimport { StyledArtistBioContainer, StyledArtistSectionContainer, StyledSocialButton } from './styles'\nimport ArtistBottomWave from '../../assets/ArtistBottomWave'\nimport TriangleBio from '../../assets/TriangleBio'\n\nconst ArtistSection = () => {\n  const { t } = useTranslation()\n  const { isDark } = useTheme()\n\n  const { headingText, bodyText, buttons, image } = artistConfigBuilder({ t, isDark })\n\n  return (\n    <StyledArtistSectionContainer $isDark={isDark} justifyContent={['flex-start', null, null, 'center']}>\n      <LandingBodyWrapper\n        py={['64px', null, null, '100px']}\n        alignItems={['center']}\n        flexDirection={['column', null, null, 'row']}\n      >\n        <Box mb={['24px', null, null, '-3px']} maxWidth={['192px', null, '250px', '100%']}>\n          <img src={image.src} alt={image.alt} />\n        </Box>\n        <Flex flexDirection=\"column\" ml={[null, null, null, '64px']}>\n          <StyledArtistBioContainer\n            maxWidth=\"550px\"\n            flexDirection=\"column\"\n            alignSelf={['flex-start', null, null, 'center']}\n            mb=\"40px\"\n          >\n            <Text fontSize=\"40px\" mr=\"4px\" bold>\n              {`${headingText}, `}{' '}\n              <Text as=\"span\" fontSize=\"40px\" color=\"secondary\" bold>\n                Chef Cecy\n              </Text>\n            </Text>\n\n            {bodyText.map((text) => (\n              <Text key={text} color=\"textSubtle\">\n                {text}\n              </Text>\n            ))}\n            <TriangleBio isDark={isDark} />\n          </StyledArtistBioContainer>\n          <Flex\n            flexDirection={['column', null, null, 'row']}\n            justifyContent={['center', null, null, 'flex-start']}\n            alignItems=\"center\"\n            mx={['10%', null, null, '0']}\n          >\n            {buttons.map((button) => (\n              <StyledSocialButton\n                key={button.text}\n                mb={['16px', null, null, '0']}\n                mr={['0', null, null, '16px']}\n                external={button.external}\n                href={button.to}\n              >\n                <Button width=\"100%\" startIcon={button.icon}>\n                  <Text color=\"card\" bold fontSize=\"16px\">\n                    {button.text}\n                  </Text>\n                </Button>\n              </StyledSocialButton>\n            ))}\n          </Flex>\n        </Flex>\n      </LandingBodyWrapper>\n      <StyledWaveContainer bottom=\"-3px\">\n        <ArtistBottomWave isDark={isDark} />\n      </StyledWaveContainer>\n    </StyledArtistSectionContainer>\n  )\n}\n\nexport default ArtistSection\n","import { ContextApi } from 'contexts/Localization/types'\n\nconst bunniesConfig = (t: ContextApi['t']) => {\n  return {\n    headingText: t('10,000 bunnies.'),\n    subHeadingText: t('ZERO duplicates.'),\n    bodyText: [\n      t('Every Pancake Squad bunny is different.'),\n      t(\n        'They’re all randomly generated from over 200 different features, with over eight BILLION possible combinations, so that no bunny is ever exactly alike.',\n      ),\n      t('On top of that, there are a very small number of ultra-rare special unique bunnies as well...!'),\n    ],\n    primaryButton: {\n      to: '/nfts',\n      text: t('View in Market'),\n    },\n    images: { basePath: '/images/pancakeSquad/bunnies/bunny', alt: 'bunny nft' },\n  }\n}\n\nexport default bunniesConfig\n","import { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledBunnySectionContainer = styled(Flex)`\n  position: relative;\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n`\n\nexport const StyledImageContainer = styled(Flex)`\n  position:relative;\n  z-index: 5;\n  flex-shrink: 0;\n\n  & > img {\n    position absolute;\n    height: 100%;\n    top: 0;\n    left: 0;\n    transition: opacity 0.5s ease-in-out;\n  }\n`\n\nexport const StyledBunnyImage = styled.img<{ $isSelected: boolean }>`\n  opacity: ${({ $isSelected }) => ($isSelected ? 1 : 0)};\n`\n\nexport const StyledTextContainer = styled(Flex)`\n  z-index: 5;\n`\n","/* eslint-disable react/no-array-index-key */\nimport React, { useEffect, useState } from 'react'\nimport { StyledBunnyImage, StyledImageContainer } from './styles'\n\ntype BunniesImages = {\n  basePath: string\n  altText: string\n}\n\nconst BUNNIES_CYCLING_TIME = 2500\n\nconst BunniesImages: React.FC<BunniesImages> = ({ basePath, altText }) => {\n  const bunnies = new Array(11).fill({})\n  const [selectedBunny, setSelectedBunny] = useState(0)\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setSelectedBunny((selectedBunny + 1) % 11)\n    }, BUNNIES_CYCLING_TIME)\n\n    return () => clearTimeout(timeoutId)\n  }, [selectedBunny])\n\n  return (\n    <StyledImageContainer\n      mb={['24px', null, null, '-3px']}\n      mr={['0', null, null, '64px']}\n      width={['192px', null, '250px', '400px', '512px']}\n      height={['192px', null, '250px', '400px', '512px']}\n    >\n      {bunnies.map((_, index) => (\n        <StyledBunnyImage\n          $isSelected={index === selectedBunny}\n          key={index}\n          src={`${basePath}${index}.png`}\n          alt={`${altText} example ${index}`}\n        />\n      ))}\n    </StyledImageContainer>\n  )\n}\n\nexport default BunniesImages\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Button, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ColoredWordHeading from 'views/Home/components/ColoredWordHeading'\nimport { LandingBodyWrapper } from 'views/PancakeSquad/styles'\nimport { SlideSvgDark, SlideSvgLight } from 'views/Home/components/SlideSvg'\nimport useTheme from 'hooks/useTheme'\nimport bunniesConfig from './config'\nimport { StyledBunnySectionContainer, StyledTextContainer } from './styles'\nimport BunniesImages from './BunniesImages'\n\nconst BunniesSection = () => {\n  const { t } = useTranslation()\n  const { isDark } = useTheme()\n\n  const { headingText, bodyText, subHeadingText, primaryButton, images } = bunniesConfig(t)\n\n  return (\n    <StyledBunnySectionContainer justifyContent={['flex-start', null, null, 'center']}>\n      <LandingBodyWrapper\n        pb={['64px', null, null, '0']}\n        pt={['64px', null, null, '40px']}\n        alignItems={['flex-end', null, 'center', null]}\n        flexDirection={['column', null, null, 'row']}\n      >\n        <BunniesImages basePath={images.basePath} altText={images.alt} />\n        <StyledTextContainer\n          flexDirection=\"column\"\n          alignSelf={['flex-start', null, null, 'center']}\n          width={['100%', null, null, '50%']}\n        >\n          <ColoredWordHeading text={headingText} color=\"text\" mb=\"0\" />\n          <ColoredWordHeading text={subHeadingText} color=\"text\" firstColor=\"failure\" />\n          {bodyText.map((text) => (\n            <Text key={text} color=\"textSubtle\" mb=\"20px\">\n              {text}\n            </Text>\n          ))}\n          <Flex>\n            <Link to={primaryButton.to}>\n              <Button>\n                <Text color=\"card\" bold fontSize=\"16px\">\n                  {t(primaryButton.text)}\n                </Text>\n              </Button>\n            </Link>\n          </Flex>\n        </StyledTextContainer>\n      </LandingBodyWrapper>\n      <Box position=\"absolute\" bottom=\"-2px\" width=\"100%\">\n        {isDark ? <SlideSvgDark width=\"100%\" /> : <SlideSvgLight width=\"100%\" />}\n      </Box>\n    </StyledBunnySectionContainer>\n  )\n}\n\nexport default BunniesSection\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { Link } from 'react-router-dom'\n\ntype EventDescriptionType = {\n  t: ContextApi['t']\n}\n\nconst eventDescriptionConfigBuilder = ({ t }: EventDescriptionType) => ({\n  headingText: t('Fair, Random, Rare'),\n  subHeadingText: t(\n    'All Pancake Squad NFTs are allocated to Squad Ticket holders through a provably-fair system based on ChainLink at the time of minting.',\n  ),\n  bodyTextHeader: t('Out of the 10,000 total NFTs in the squad,'),\n  bodyText: [\n    {\n      id: 1,\n      content: (\n        <>{t('490 are available in the pre-sale for owners of Gen 0 Pancake Bunnies (bunnyID 0, 1, 2, 3, 4)')}</>\n      ),\n    },\n    { id: 2, content: t('120 are reserved by the team for community giveaways, etc;') },\n    {\n      id: 3,\n      content: (\n        <>\n          {t('and the remaining NFTs can be minted by anyone with a ')}\n          <Link to=\"/profile\">\n            <Text display=\"inline-block\" color=\"primary\" bold>\n              {t('Pancake Profile!')}\n            </Text>\n          </Link>\n        </>\n      ),\n    },\n  ],\n  primaryButton: {\n    to: 'https://docs.pancakeswap.finance/',\n    text: t('View Documentation'),\n    external: true,\n    isDisplayed: false,\n  },\n  image: { src: '/images/pancakeSquad/moonBunny/body.png', alt: 'moon bunny' },\n  accessoriesImages: [\n    { src: '/images/pancakeSquad/moonBunny/band.png', alt: 'headband' },\n    { src: '/images/pancakeSquad/moonBunny/cloth.png', alt: 'cloth' },\n    { src: '/images/pancakeSquad/moonBunny/glasses.png', alt: 'glasses' },\n    { src: '/images/pancakeSquad/moonBunny/pancake.png', alt: 'pancake' },\n  ],\n})\n\nexport default eventDescriptionConfigBuilder\n","import { Flex, lightColors } from '@pancakeswap/uikit'\nimport styled, { keyframes } from 'styled-components'\n\nconst flyingAnim = () => keyframes`\n  from {\n    transform: translate(0,  0px);\n  }\n  50% {\n    transform: translate(-5px, -5px);\n  }\n  to {\n    transform: translate(0, 0px);\n  }  \n`\n\nexport const StyledEventDescriptionSectionContainer = styled(Flex)`\n  background: ${({ theme }) => theme.colors.background};\n`\n\nexport const StyledBodyTextList = styled('ul')`\n  color: ${lightColors.textSubtle};\n  margin-bottom: 24px;\n`\n\nexport const StyledBodyTextElement = styled('li')`\n  margin-left: 12px;\n`\n\nexport const StyledBunnyAccessoriesContainer = styled(Flex)`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n\n  & :nth-child(1) {\n    animation: ${flyingAnim} 3.5s ease-in-out infinite;\n    animation-delay: 1s;\n  }\n\n  & :nth-child(2) {\n    animation: ${flyingAnim} 3.5s ease-in-out infinite;\n    animation-delay: 0.66s;\n  }\n\n  & :nth-child(3) {\n    animation: ${flyingAnim} 3.5s ease-in-out infinite;\n    animation-delay: 0.33s;\n  }\n\n  & :nth-child(4) {\n    animation: ${flyingAnim} 3.5s ease-in-out infinite;\n    animation-delay: 0s;\n  }\n`\n\nexport const StyledBunnyAccessory = styled.img`\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 5;\n`\n","import React from 'react'\nimport { Box, Button, Flex, Link, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LandingBodyWrapper } from 'views/PancakeSquad/styles'\nimport eventDescriptionConfigBuilder from './config'\nimport {\n  StyledBodyTextElement,\n  StyledBodyTextList,\n  StyledBunnyAccessoriesContainer,\n  StyledBunnyAccessory,\n  StyledEventDescriptionSectionContainer,\n} from './styles'\n\nconst EventDescriptionSection = () => {\n  const { t } = useTranslation()\n\n  const { headingText, subHeadingText, bodyTextHeader, bodyText, primaryButton, image, accessoriesImages } =\n    eventDescriptionConfigBuilder({ t })\n\n  return (\n    <StyledEventDescriptionSectionContainer justifyContent={['flex-start', null, null, 'center']}>\n      <LandingBodyWrapper\n        alignItems={['flex-end', null, 'center', null]}\n        flexDirection={['column', null, null, 'row']}\n        pt={['64px', null, '104px']}\n        pb=\"60px\"\n      >\n        <Flex\n          flex={1}\n          order={[2, null, null, 1]}\n          flexDirection=\"column\"\n          mr={[null, null, null, '64px']}\n          alignSelf={['flex-start', null, null, 'center']}\n          width={['100%', null, null, '50%']}\n        >\n          <Text color=\"text\" fontSize=\"40px\" mb=\"24px\" bold>\n            {headingText}\n          </Text>\n          <Text color=\"textSubtle\" mb=\"24px\">\n            {subHeadingText}\n          </Text>\n          <Text color=\"textSubtle\">{bodyTextHeader}</Text>\n          <StyledBodyTextList>\n            {bodyText.map((text) => (\n              <StyledBodyTextElement key={text.id}>{text.content}</StyledBodyTextElement>\n            ))}\n          </StyledBodyTextList>\n          {primaryButton?.isDisplayed && (\n            <Flex>\n              <Link mr=\"16px\" external={primaryButton.external} href={primaryButton.to}>\n                <Button variant=\"secondary\">\n                  <Text color=\"card\" bold fontSize=\"16px\">\n                    {t(primaryButton.text)}\n                  </Text>\n                </Button>\n              </Link>\n            </Flex>\n          )}\n        </Flex>\n        <Flex\n          position=\"relative\"\n          order={[1, null, null, 2]}\n          mb={['24px', null, '-3px']}\n          width={['192px', null, '250px', '50%']}\n        >\n          <Box>\n            <img src={image.src} alt={image.alt} />\n          </Box>\n          <StyledBunnyAccessoriesContainer>\n            {accessoriesImages.map((accessory) => (\n              <StyledBunnyAccessory key={accessory.alt} src={accessory.src} alt={accessory.alt} />\n            ))}\n          </StyledBunnyAccessoriesContainer>\n        </Flex>\n      </LandingBodyWrapper>\n    </StyledEventDescriptionSectionContainer>\n  )\n}\n\nexport default EventDescriptionSection\n","import * as React from 'react'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\nconst Icon: React.FC<SvgProps & { isDark: boolean }> = ({ isDark, ...props }) => {\n  return (\n    <Svg preserveAspectRatio=\"none\" viewBox=\"0 0 1280 17\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n      <path\n        d=\"M0 16.002V0.00195312C159.43 9.20767 387.163 14.9682 640 14.9682C892.837 14.9682 1120.57 9.20767 1280 0.00195312V16.002H0Z\"\n        fill=\"url(#squad_event_steps_bottom_wave)\"\n      />\n      <defs>\n        <linearGradient id=\"squad_event_steps_bottom_wave\" gradientUnits=\"userSpaceOnUse\">\n          <stop stopColor={isDark ? '#313D5C' : '#FAF9FA'} />\n          <stop offset=\"1\" stopColor={isDark ? '#3D2A54' : '#d7caec'} />\n        </linearGradient>\n      </defs>\n    </Svg>\n  )\n}\n\nexport default Icon\n","import * as React from 'react'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\nconst Icon: React.FC<SvgProps & { isDark }> = ({ isDark, ...props }) => {\n  return (\n    <Svg viewBox=\"0 0 1280 17\" preserveAspectRatio=\"none\" {...props}>\n      <path\n        d=\"M0 16.002v-16c159.43 9.206 387.163 14.966 640 14.966s480.57-5.76 640-14.966v16H0z\"\n        fill={isDark ? '#0B4576' : '#70B7F2'}\n      />\n    </Svg>\n  )\n}\n\nexport default Icon\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { UserStatusEnum } from 'views/PancakeSquad/types'\n\ntype ActivateProfileButtonProps = {\n  t: ContextApi['t']\n  userStatus: UserStatusEnum\n}\n\nconst ActivateProfileButton: React.FC<ActivateProfileButtonProps> = ({ t, userStatus }) => (\n  <>\n    {(userStatus === UserStatusEnum.NO_PROFILE || userStatus === UserStatusEnum.UNCONNECTED) && (\n      <Button as={Link} to=\"/create-profile\" mr=\"4px\">\n        {t('Activate Profile')}\n      </Button>\n    )}\n  </>\n)\n\nexport default ActivateProfileButton\n","export enum BuyButtonsEnum {\n  ENABLE,\n  BUY,\n  READY,\n  NONE,\n}\n","import React, { Dispatch, SetStateAction } from 'react'\n\nexport const PancakeSquadContext = React.createContext<{\n  isUserEnabled: boolean\n  setIsUserEnabled: Dispatch<SetStateAction<boolean>> | null\n}>({\n  isUserEnabled: false,\n  setIsUserEnabled: null,\n})\n","/* eslint-disable react/no-array-index-key */\nimport { BigNumber } from 'ethers'\nimport {\n  Box,\n  Button,\n  CloseIcon,\n  Flex,\n  Heading,\n  IconButton,\n  InfoIcon,\n  ModalBody,\n  ModalContainer,\n  ModalHeader,\n  ModalProps,\n  ModalTitle,\n  Text,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport React, { useState } from 'react'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport { SaleStatusEnum } from 'views/PancakeSquad/types'\n\ninterface BuyTicketsModalProps extends ModalProps {\n  buyTicketCallBack: ({ ticketsNumber }: { ticketsNumber: number }) => void\n  saleStatus: SaleStatusEnum\n  cakeBalance: BigNumber\n  pricePerTicket: BigNumber\n  maxPerAddress: number\n  maxPerTransaction: number\n  numberTicketsOfUser: number\n  numberTicketsForGen0: number\n  numberTicketsUsedForGen0: number\n}\n\nconst DEFAULT_MAX_PER_TX = 3\n\nconst BuyTicketsModal: React.FC<BuyTicketsModalProps> = ({\n  onDismiss,\n  buyTicketCallBack,\n  title,\n  headerBackground,\n  saleStatus,\n  cakeBalance,\n  pricePerTicket,\n  maxPerAddress,\n  maxPerTransaction,\n  numberTicketsForGen0,\n  numberTicketsOfUser,\n  numberTicketsUsedForGen0,\n}) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const [ticketsNumber, setTicketsNumber] = useState<number | null>(1)\n  const isPreSale = saleStatus === SaleStatusEnum.Presale\n  const remainingTickets = isPreSale\n    ? numberTicketsForGen0\n    : maxPerAddress - (numberTicketsOfUser - numberTicketsUsedForGen0)\n  const isCakeBalanceInsufficient = cakeBalance.lt(pricePerTicket)\n  const maxBuyTickets = Math.min(cakeBalance.div(pricePerTicket).toNumber(), remainingTickets)\n  const totalCost = pricePerTicket.mul(BigNumber.from(ticketsNumber))\n  const maxBuyButtons =\n    saleStatus === SaleStatusEnum.Presale\n      ? Math.min(numberTicketsForGen0, DEFAULT_MAX_PER_TX)\n      : Math.min(maxPerTransaction, DEFAULT_MAX_PER_TX)\n  const buyButtons = new Array(maxBuyButtons).fill('')\n\n  return (\n    <ModalContainer minWidth=\"375px\">\n      <ModalHeader background={headerBackground}>\n        <ModalTitle>\n          <Heading>{title}</Heading>\n        </ModalTitle>\n        <IconButton variant=\"text\" onClick={onDismiss}>\n          <CloseIcon width=\"24px\" color=\"text\" />\n        </IconButton>\n      </ModalHeader>\n      <ModalBody py=\"24px\" maxWidth=\"375px\" width=\"100%\">\n        <Flex flexDirection=\"column\">\n          <Box px=\"16px\">\n            <Text fontSize=\"12px\" fontWeight=\"600\" textTransform=\"uppercase\" color=\"secondary\" mb=\"16px\">\n              {t('Buy how many?')}\n            </Text>\n            <Flex justifyContent=\"space-evenly\" mb=\"24px\">\n              {buyButtons.map((_, index) => (\n                <Button\n                  key={index}\n                  variant={index + 1 === ticketsNumber ? 'primary' : 'tertiary'}\n                  onClick={() => setTicketsNumber(index + 1)}\n                  disabled={index + 1 > maxBuyTickets}\n                >\n                  {index + 1}\n                </Button>\n              ))}\n            </Flex>\n            <Flex mb=\"8px\" justifyContent=\"space-between\">\n              <Text font-size=\"14px\" color=\"textSubtle\">\n                {t('Cost per Ticket')}\n              </Text>\n              <Text font-size=\"14px\">{formatBigNumber(pricePerTicket, 0)} CAKE</Text>\n            </Flex>\n            <Flex mb=\"8px\" justifyContent=\"space-between\">\n              <Text font-size=\"14px\" color=\"textSubtle\">\n                {t('Your CAKE Balance')}\n              </Text>\n              <Text font-size=\"14px\" color={isCakeBalanceInsufficient ? 'failure' : 'text'}>\n                {formatBigNumber(cakeBalance, 3)} CAKE\n              </Text>\n            </Flex>\n            <Flex\n              mb=\"8px\"\n              pb=\"8px\"\n              justifyContent=\"space-between\"\n              font-size=\"14px\"\n              color=\"textSubtle\"\n              borderBottom={`1px solid ${theme.colors.cardBorder}`}\n            >\n              <Text font-size=\"14px\" color=\"textSubtle\">\n                {t('Your remaining limit')}\n              </Text>\n              <Text font-size=\"14px\">{`${remainingTickets} ${t('Tickets')}`}</Text>\n            </Flex>\n            <Flex mb=\"25px\" justifyContent=\"space-between\">\n              <Text font-size=\"14px\" color=\"textSubtle\">\n                {t('Total Cost')}\n              </Text>\n              <Text font-size=\"14px\" bold>\n                {formatBigNumber(totalCost, 0)} CAKE\n              </Text>\n            </Flex>\n          </Box>\n          <Flex\n            px=\"16px\"\n            py=\"24px\"\n            mb=\"16px\"\n            background={theme.colors.background}\n            borderBottom={`1px solid ${theme.colors.cardBorder}`}\n            borderTop={`1px solid ${theme.colors.cardBorder}`}\n            alignItems=\"start\"\n          >\n            <Box>\n              <InfoIcon width=\"20px\" mt=\"4px\" mr=\"10px\" color=\"textSubtle\" />\n            </Box>\n            <Box>\n              <Text font-size=\"12px\" color=\"textSubtle\" mb=\"12px\">\n                {t('The network may become busy during the sale period. Consider setting a high gas fee (GWEI).')}\n              </Text>\n              <Text font-size=\"12px\" color=\"textSubtle\">\n                {t(`Max. Tickets per transaction: ${maxPerTransaction || DEFAULT_MAX_PER_TX}`)}\n              </Text>\n              {maxPerAddress > 0 && (\n                <Text font-size=\"12px\" color=\"textSubtle\">\n                  {t(`Max. Tickets per wallet: ${maxPerAddress}`)}\n                </Text>\n              )}\n            </Box>\n          </Flex>\n          <Box px=\"16px\">\n            <Button\n              disabled={isCakeBalanceInsufficient}\n              onClick={() => buyTicketCallBack({ ticketsNumber })}\n              width=\"100%\"\n            >\n              {isCakeBalanceInsufficient ? t('Insufficient Balance') : t('Confirm')}\n            </Button>\n          </Box>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default BuyTicketsModal\n","/* eslint-disable react/no-array-index-key */\nimport {\n  ArrowUpIcon,\n  Box,\n  Button,\n  CloseIcon,\n  Flex,\n  Heading,\n  IconButton,\n  LinkExternal,\n  ModalBody,\n  ModalContainer,\n  ModalHeader,\n  ModalProps,\n  ModalTitle,\n  Spinner,\n  Text,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport useTheme from 'hooks/useTheme'\nimport React from 'react'\nimport { getBscScanLink } from 'utils'\nimport truncateHash from 'utils/truncateHash'\n\ntype ConfirmModalProps = {\n  isLoading: boolean\n  txHash?: string\n  loadingText: string\n  loadingButtonLabel: string\n  successButtonLabel: string\n  onConfirmClose: () => void\n} & ModalProps\n\nconst ConfirmModal: React.FC<ConfirmModalProps> = ({\n  onDismiss,\n  onConfirmClose,\n  title,\n  isLoading,\n  headerBackground,\n  txHash,\n  loadingText,\n  loadingButtonLabel,\n  successButtonLabel,\n}) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  const onCloseCallback = () => {\n    onConfirmClose()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer minWidth=\"375px\">\n      <ModalHeader background={headerBackground}>\n        <ModalTitle>\n          <Heading>{title}</Heading>\n        </ModalTitle>\n        <IconButton variant=\"text\" onClick={onCloseCallback}>\n          <CloseIcon width=\"24px\" color=\"text\" />\n        </IconButton>\n      </ModalHeader>\n      <ModalBody py=\"24px\" maxWidth=\"375px\" width=\"100%\">\n        <Flex flexDirection=\"column\" alignItems=\"center\">\n          {isLoading || !txHash ? (\n            <Box px=\"16px\">\n              <Flex mb=\"16px\" alignItems=\"center\">\n                <Box mr=\"16px\">\n                  <Text fontSize=\"20px\" bold color=\"secondary\">\n                    {title}\n                  </Text>\n                  <Text fontSize=\"14px\" color=\"textSubtle\">\n                    {loadingText}\n                  </Text>\n                </Box>\n                <Spinner size={50} />\n              </Flex>\n              <Button width=\"100%\" variant=\"secondary\" disabled>\n                {loadingButtonLabel}\n              </Button>\n            </Box>\n          ) : (\n            <>\n              <ArrowUpIcon width=\"60px\" mb=\"30px\" color=\"primary\" />\n              <Text mb=\"30px\" bold>\n                {t('Transaction Submitted')}\n              </Text>\n              <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)} mb=\"30px\">\n                {t('View on BscScan')}: {truncateHash(txHash, 8, 0)}\n              </LinkExternal>\n              <Flex\n                justifyContent=\"center\"\n                width=\"100%\"\n                px=\"16px\"\n                pt=\"16px\"\n                borderTop={`1px solid ${theme.colors.cardBorder}`}\n              >\n                <Button width=\"100%\" variant=\"secondary\" onClick={onCloseCallback}>\n                  {successButtonLabel}\n                </Button>\n              </Flex>\n            </>\n          )}\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ConfirmModal\n","import { CheckmarkIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport React from 'react'\n\ntype ReadyTextProps = {\n  text: string\n} & FlexProps\n\nconst ReadyText: React.FC<ReadyTextProps> = ({ text, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <Text fontSize=\"16px\" color=\"success\" mr=\"4px\" bold>\n        {text}\n      </Text>\n      <CheckmarkIcon color=\"success\" width=\"17px\" />\n    </Flex>\n  )\n}\n\nexport default ReadyText\n","import { ContextApi } from 'contexts/Localization/types'\nimport { SaleStatusEnum } from 'views/PancakeSquad/types'\nimport { BuyButtonsEnum } from './types'\n\ntype getBuyButtonTextProps = {\n  t: ContextApi['t']\n  canBuyTickets: boolean\n  saleStatus: SaleStatusEnum\n  numberTicketsOfUser: number\n}\n\nexport const getBuyButtonText = ({ t, canBuyTickets, saleStatus, numberTicketsOfUser }: getBuyButtonTextProps) => {\n  if ((saleStatus === SaleStatusEnum.Presale || saleStatus === SaleStatusEnum.Sale) && !canBuyTickets) {\n    if (numberTicketsOfUser > 0) {\n      return saleStatus === SaleStatusEnum.Presale ? t('Presale max purchased') : t('Max purchased')\n    }\n    return t('Not eligible')\n  }\n\n  return t('Buy Tickets')\n}\n\ntype getBuyButtonProps = {\n  isApproved: boolean\n  isUserReady: boolean\n  isGen0User: boolean\n  saleStatus: SaleStatusEnum\n  startTimestamp: number\n  numberTicketsUsedForGen0: number\n}\n\nconst FIFTEEN_MINUTES = 60 * 15\n\nexport const getBuyButton = ({\n  isApproved,\n  isGen0User,\n  saleStatus,\n  startTimestamp,\n  isUserReady,\n  numberTicketsUsedForGen0,\n}: getBuyButtonProps) => {\n  const now = Date.now()\n  if (!isApproved) return BuyButtonsEnum.ENABLE\n  if (isUserReady) return BuyButtonsEnum.READY\n  if (\n    (saleStatus === SaleStatusEnum.Presale &&\n      (isGen0User || numberTicketsUsedForGen0 > 0) &&\n      now < startTimestamp - FIFTEEN_MINUTES * 1000) ||\n    (saleStatus === SaleStatusEnum.Sale && now >= startTimestamp)\n  )\n    return BuyButtonsEnum.BUY\n\n  return BuyButtonsEnum.NONE\n}\n","import { EventInfos, UserInfos, UserStatusEnum } from 'views/PancakeSquad/types'\n\nexport type PancakeSquadHeaderType = {\n  account: string\n  isLoading: boolean\n  eventInfos?: EventInfos\n  userInfos?: UserInfos\n  userStatus: UserStatusEnum\n}\n\nexport enum ButtonsEnum {\n  ACTIVATE,\n  BUY,\n  MINT,\n  END,\n  NONE,\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Button, useModal } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { ethers, BigNumber } from 'ethers'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { useCake, useNftSaleContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { DefaultTheme } from 'styled-components'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport { PancakeSquadContext } from 'views/PancakeSquad/context'\nimport { SaleStatusEnum, UserStatusEnum } from '../../types'\nimport BuyTicketsModal from '../Modals/BuyTickets'\nimport ConfirmModal from '../Modals/Confirm'\nimport ReadyText from '../Header/ReadyText'\nimport { getBuyButton, getBuyButtonText } from './utils'\nimport { BuyButtonsEnum } from './types'\n\ntype BuyTicketsProps = {\n  t: ContextApi['t']\n  account: string\n  saleStatus: SaleStatusEnum\n  userStatus: UserStatusEnum\n  theme: DefaultTheme\n  canClaimForGen0: boolean\n  maxPerAddress: number\n  maxPerTransaction: number\n  numberTicketsOfUser: number\n  numberTicketsForGen0: number\n  numberTicketsUsedForGen0: number\n  cakeBalance: BigNumber\n  pricePerTicket: BigNumber\n  startTimestamp: number\n}\n\nconst BuyTicketsButtons: React.FC<BuyTicketsProps> = ({\n  t,\n  account,\n  saleStatus,\n  userStatus,\n  theme,\n  canClaimForGen0,\n  maxPerAddress,\n  maxPerTransaction,\n  numberTicketsOfUser,\n  numberTicketsForGen0,\n  numberTicketsUsedForGen0,\n  cakeBalance,\n  pricePerTicket,\n  startTimestamp,\n}) => {\n  const [txHashEnablingResult, setTxHashEnablingResult] = useState(null)\n  const [txHashBuyingResult, setTxHashBuyingResult] = useState(null)\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const nftSaleContract = useNftSaleContract()\n  const { toastSuccess } = useToast()\n  const cakeContract = useCake()\n  const { isUserEnabled, setIsUserEnabled } = useContext(PancakeSquadContext)\n\n  const canBuySaleTicket =\n    saleStatus === SaleStatusEnum.Sale && numberTicketsOfUser - numberTicketsUsedForGen0 < maxPerAddress\n  const isPreSale = saleStatus === SaleStatusEnum.Presale\n  const isGen0User = userStatus === UserStatusEnum.PROFILE_ACTIVE_GEN0\n  const isUserReady =\n    (userStatus === UserStatusEnum.PROFILE_ACTIVE && saleStatus < SaleStatusEnum.Sale) ||\n    (isGen0User && saleStatus === SaleStatusEnum.Pending)\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm, hasApproveFailed, hasConfirmFailed } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.allowance(account, nftSaleContract.address)\n          const currentAllowance = ethersToBigNumber(response)\n          return currentAllowance.gt(0)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [nftSaleContract.address, ethers.constants.MaxUint256])\n      },\n      onApproveSuccess: async ({ receipt }) => {\n        toastSuccess(t('Transaction has succeeded!'))\n        setTxHashEnablingResult(receipt.transactionHash)\n      },\n      onConfirm: ({ ticketsNumber }) => {\n        onPresentConfirmModal()\n        return callWithGasPrice(nftSaleContract, isPreSale ? 'buyTicketsInPreSaleForGen0' : 'buyTickets', [\n          ticketsNumber,\n        ])\n      },\n      onSuccess: async ({ receipt }) => {\n        toastSuccess(t('Transaction has succeeded!'))\n        setTxHashBuyingResult(receipt.transactionHash)\n      },\n    })\n\n  const onConfirmClose = () => {\n    setTxHashBuyingResult(null)\n  }\n\n  const [onPresentConfirmModal] = useModal(\n    <ConfirmModal\n      title={t('Confirm')}\n      isLoading={isConfirming}\n      headerBackground={theme.colors.gradients.cardHeader}\n      txHash={txHashBuyingResult}\n      loadingText={t('Please confirm your transaction in wallet.')}\n      loadingButtonLabel={t('Confirming...')}\n      successButtonLabel={t('Close')}\n      onConfirmClose={onConfirmClose}\n    />,\n    false,\n  )\n\n  const [onPresentEnableModal, onDismissEnableModal] = useModal(\n    <ConfirmModal\n      title={t('Enable')}\n      isLoading={isApproving}\n      headerBackground={theme.colors.gradients.cardHeader}\n      txHash={txHashEnablingResult}\n      loadingText={t('Please enable CAKE spending in your wallet')}\n      loadingButtonLabel={t('Enabling...')}\n      successButtonLabel={t('Close')}\n      onConfirmClose={onConfirmClose}\n    />,\n    false,\n  )\n\n  const [onPresentBuyTicketsModal, onDismissBuyTicketsModal] = useModal(\n    <BuyTicketsModal\n      title={t('Buy Minting Tickets')}\n      buyTicketCallBack={handleConfirm}\n      headerBackground={theme.colors.gradients.cardHeader}\n      cakeBalance={cakeBalance}\n      maxPerAddress={maxPerAddress}\n      maxPerTransaction={maxPerTransaction}\n      numberTicketsForGen0={numberTicketsForGen0}\n      numberTicketsOfUser={numberTicketsOfUser}\n      numberTicketsUsedForGen0={numberTicketsUsedForGen0}\n      pricePerTicket={pricePerTicket}\n      saleStatus={saleStatus}\n    />,\n  )\n\n  useEffect(() => txHashEnablingResult && onPresentEnableModal(), [txHashEnablingResult])\n  useEffect(() => txHashBuyingResult && onPresentConfirmModal(), [txHashBuyingResult])\n  useEffect(() => hasApproveFailed && onDismissEnableModal(), [hasApproveFailed])\n  useEffect(() => hasConfirmFailed && onDismissBuyTicketsModal(), [hasConfirmFailed])\n  useEffect(() => isApproved && setIsUserEnabled && setIsUserEnabled(isApproved), [isApproved, setIsUserEnabled])\n\n  const handleEnableClick = () => {\n    onPresentEnableModal()\n    handleApprove()\n  }\n\n  const canBuyTickets = (canClaimForGen0 || canBuySaleTicket) && isUserEnabled\n  const buyButton = getBuyButton({\n    isApproved: isUserEnabled,\n    isGen0User,\n    saleStatus,\n    startTimestamp,\n    isUserReady,\n    numberTicketsUsedForGen0,\n  })\n\n  return (\n    <>\n      {buyButton === BuyButtonsEnum.ENABLE && (\n        <Button width=\"100%\" onClick={handleEnableClick}>\n          {t('Enable')}\n        </Button>\n      )}\n      {buyButton === BuyButtonsEnum.READY && (\n        <ReadyText text={isGen0User ? t('Ready for Pre-Sale!') : t('Ready for Public Sale!')} />\n      )}\n      {buyButton === BuyButtonsEnum.BUY && (\n        <Button width=\"100%\" onClick={onPresentBuyTicketsModal} disabled={!canBuyTickets}>\n          {getBuyButtonText({ canBuyTickets, numberTicketsOfUser, saleStatus, t })}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default BuyTicketsButtons\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Flex } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { SaleStatusEnum, UserStatusEnum } from '../../types'\n\ntype EndEventProps = {\n  t: ContextApi['t']\n  account: string\n  saleStatus: SaleStatusEnum\n  userStatus: UserStatusEnum\n  maxSupply: number\n  totalSupplyMinted: number\n  numberTokensOfUser: number\n}\n\nconst EndEventButtons: React.FC<EndEventProps> = ({\n  t,\n  account,\n  saleStatus,\n  numberTokensOfUser,\n  maxSupply,\n  totalSupplyMinted,\n}) => {\n  const hasSquad = saleStatus === SaleStatusEnum.Claim && numberTokensOfUser > 0\n  const canViewMarket = maxSupply === totalSupplyMinted\n\n  return (\n    <Flex flexDirection={['column', null, null, 'row']}>\n      {canViewMarket && (\n        <Button mb={['4px', null, null, '0']} mr={[0, null, null, '4px']}>\n          <Link to=\"/nfts\">{t('View market')}</Link>\n        </Button>\n      )}\n      {hasSquad && (\n        <Button>\n          <Link to={`/nfts/profile/${account}`}>{t('Your Squad (%tokens%)', { tokens: numberTokensOfUser })}</Link>\n        </Button>\n      )}\n    </Flex>\n  )\n}\n\nexport default EndEventButtons\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { BigNumber } from 'ethers'\nimport React, { useEffect, useState } from 'react'\nimport { AutoRenewIcon, Button, useModal } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { useNftSaleContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { DefaultTheme } from 'styled-components'\nimport { SaleStatusEnum } from '../../types'\nimport ConfirmModal from '../Modals/Confirm'\n\ntype PreEventProps = {\n  t: ContextApi['t']\n  theme: DefaultTheme\n  saleStatus: SaleStatusEnum\n  numberTicketsOfUser: number\n  numberTokensOfUser: number\n  ticketsOfUser: BigNumber[]\n}\n\nconst MintButton: React.FC<PreEventProps> = ({ t, theme, saleStatus, numberTicketsOfUser, ticketsOfUser }) => {\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const nftSaleContract = useNftSaleContract()\n  const [isLoading, setIsLoading] = useState(false)\n  const [txHashMintingResult, setTxHashMintingResult] = useState(null)\n  const { toastError } = useToast()\n  const canMintTickets = saleStatus === SaleStatusEnum.Claim && numberTicketsOfUser > 0\n  const { toastSuccess } = useToast()\n\n  const onConfirmClose = () => {\n    setTxHashMintingResult(null)\n  }\n\n  const [onPresentConfirmModal, onDismiss] = useModal(\n    <ConfirmModal\n      title={t('Mint')}\n      isLoading={isLoading}\n      headerBackground={theme.colors.gradients.cardHeader}\n      txHash={txHashMintingResult}\n      loadingText={t('Please confirm your transaction in wallet.')}\n      loadingButtonLabel={t('Minting...')}\n      successButtonLabel={t('Close')}\n      onConfirmClose={onConfirmClose}\n    />,\n    false,\n  )\n\n  const mintTokenCallBack = async () => {\n    setIsLoading(true)\n    try {\n      const tx = await callWithGasPrice(nftSaleContract, 'mint', [ticketsOfUser])\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(t('Transaction has succeeded!'))\n        setTxHashMintingResult(receipt.transactionHash)\n      }\n    } catch (error) {\n      console.error(error)\n      onDismiss()\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => txHashMintingResult && !isLoading && onPresentConfirmModal(), [isLoading, txHashMintingResult])\n\n  return (\n    <>\n      {canMintTickets && (\n        <Button\n          width=\"100%\"\n          onClick={mintTokenCallBack}\n          disabled={isLoading}\n          endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n        >\n          {t('Mint NFTs (%tickets%)', { tickets: numberTicketsOfUser })}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default MintButton\n","import getTimePeriods from './getTimePeriods'\n\n/**\n * @param {Object} periods Return value from getTimePeriods\n * @param excludePeriods Key list for the object values of that exclude the periods\n * @return {string} '14h 3m 4s'\n */\nconst formatTimePeriod = (periods: ReturnType<typeof getTimePeriods>, excludePeriods = []) => {\n  const textArr = []\n\n  Object.keys(periods).forEach((period) => {\n    if (periods[period] > 0 && !excludePeriods.includes(period)) {\n      textArr.push(`${periods[period]}${period.substr(0, 1)}`)\n    }\n  })\n\n  if (textArr.length === 0) {\n    return null\n  }\n\n  return textArr.join(' ')\n}\n\nexport default formatTimePeriod\n","import { EventStatus } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport formatTimePeriod from 'utils/formatTimePeriod'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { SaleStatusEnum, UserStatusEnum } from './types'\n\ntype getUserStatusType = {\n  account?: string\n  hasGen0: boolean | null\n  hasActiveProfile: boolean\n}\n\nexport type getEventStepStatusType = {\n  eventStatus: SaleStatusEnum[]\n  saleStatus: SaleStatusEnum\n  startTimestamp?: number\n}\n\ntype getEventTextType = {\n  t: ContextApi['t']\n  saleStatus: SaleStatusEnum\n  eventStatus: SaleStatusEnum[]\n  startTimestamp?: number\n}\n\ntype getTimePeriodFromTimeStampType = {\n  startTimestamp?: number\n  timestampOffsetInSeconds?: number\n}\n\ntype getAltTextType = {\n  t: ContextApi['t']\n  saleStatus: SaleStatusEnum\n  eventStatus: SaleStatusEnum[]\n  startTimestamp?: number\n}\n\nconst FIFTEEN_MINUTES = 60 * 15\nconst PRESALE_TIMESTAMP = 1633579200000\n\nexport const getUserStatus = ({ account, hasActiveProfile, hasGen0 }: getUserStatusType): UserStatusEnum => {\n  if (account && hasActiveProfile && hasGen0) {\n    return UserStatusEnum.PROFILE_ACTIVE_GEN0\n  }\n  if (account && hasActiveProfile) {\n    return UserStatusEnum.PROFILE_ACTIVE\n  }\n  if (account) {\n    return UserStatusEnum.NO_PROFILE\n  }\n  return UserStatusEnum.UNCONNECTED\n}\n\nconst eventTextMapping = (t: ContextApi['t'], saleStatus: SaleStatusEnum) => {\n  switch (saleStatus) {\n    case SaleStatusEnum.Pending:\n      return t('Get Ready')\n    case SaleStatusEnum.Premint:\n      return t('Get Ready')\n    case SaleStatusEnum.Presale:\n      return t('Presale')\n    case SaleStatusEnum.Sale:\n      return t('Public Sale')\n    case SaleStatusEnum.DrawingRandomness:\n      return t('Public Sale')\n    case SaleStatusEnum.Claim:\n      return t('Claim Phase')\n    default:\n      return ''\n  }\n}\n\nexport const getEventStepStatus = ({\n  eventStatus,\n  saleStatus,\n  startTimestamp,\n}: getEventStepStatusType): EventStatus => {\n  const now = Date.now()\n  if (eventStatus.every((status) => status < saleStatus)) return 'past'\n  if (eventStatus.some((status) => status === saleStatus)) {\n    if (startTimestamp && saleStatus === SaleStatusEnum.Presale && now > startTimestamp - FIFTEEN_MINUTES * 1000) {\n      return 'past'\n    }\n    return 'live'\n  }\n  return 'upcoming'\n}\n\nconst getTimePeriodFromTimeStamp = ({\n  startTimestamp,\n  timestampOffsetInSeconds = 0,\n}: getTimePeriodFromTimeStampType) => {\n  if (!startTimestamp) return ''\n\n  const nowInSeconds = Date.now() / 1000\n  const startTimestampInSeconds = startTimestamp / 1000 - timestampOffsetInSeconds\n  const timePeriods = getTimePeriods(Math.round(startTimestampInSeconds - nowInSeconds))\n  return formatTimePeriod(timePeriods) || '0s'\n}\n\nexport const getEventText = ({ eventStatus, saleStatus, startTimestamp, t }: getEventTextType): string => {\n  const eventStepStatus = getEventStepStatus({ eventStatus, saleStatus, startTimestamp })\n  if (eventStepStatus === 'live' && saleStatus === SaleStatusEnum.DrawingRandomness)\n    return `${eventTextMapping(t, eventStatus[0])}: ${t('Sold Out!')}`\n  if (eventStepStatus === 'live' && saleStatus > 0) {\n    if (saleStatus === SaleStatusEnum.Presale) {\n      return `${eventTextMapping(t, eventStatus[0])}: ${t('end in')} ${getTimePeriodFromTimeStamp({\n        startTimestamp,\n        timestampOffsetInSeconds: FIFTEEN_MINUTES,\n      })}`\n    }\n\n    if (saleStatus === SaleStatusEnum.DrawingRandomness) {\n      return `${eventTextMapping(t, eventStatus[0])}: ${t('Sold Out!')}`\n    }\n\n    if (saleStatus > SaleStatusEnum.Premint) {\n      return `${eventTextMapping(t, eventStatus[0])}: ${t('Now Live')}`\n    }\n  }\n  if (eventStepStatus === 'past' && eventStatus[0] === SaleStatusEnum.Presale) {\n    return `${eventTextMapping(t, eventStatus[0])}: Closed`\n  }\n  if (eventStepStatus === 'upcoming') {\n    return `${eventTextMapping(t, eventStatus[0])}: `\n  }\n\n  return eventTextMapping(t, eventStatus[0])\n}\n\nexport const getAltText = ({ startTimestamp, eventStatus, saleStatus, t }: getAltTextType): string | undefined => {\n  const eventStepStatus = getEventStepStatus({ eventStatus, saleStatus, startTimestamp })\n  if (saleStatus === SaleStatusEnum.DrawingRandomness && eventStepStatus === 'upcoming') return t('Starting Soon')\n  if (eventStepStatus === 'upcoming' && eventStatus[0] === SaleStatusEnum.Presale) {\n    return `${t('starts in')} ${getTimePeriodFromTimeStamp({ startTimestamp: PRESALE_TIMESTAMP })}`\n  }\n  if (startTimestamp && eventStepStatus === 'upcoming' && eventStatus[0] === SaleStatusEnum.Sale) {\n    return `${t('starts in')} ${getTimePeriodFromTimeStamp({ startTimestamp })}`\n  }\n  return undefined\n}\n","import { EventStatus, StepStatus } from '@pancakeswap/uikit'\nimport { SaleStatusEnum } from 'views/PancakeSquad/types'\nimport { getEventStepStatus, getEventStepStatusType } from 'views/PancakeSquad/utils'\n\ntype getStepperStatusType = getEventStepStatusType & {\n  hasProfileActivated: boolean\n  numberTicketsOfUser?: number\n  isLastPhase?: boolean\n}\n\nconst eventStatusMapping: Record<EventStatus, StepStatus> = {\n  past: 'past',\n  live: 'current',\n  upcoming: 'future',\n}\n\nexport const getStepperStatus = ({\n  eventStatus,\n  saleStatus: currentSaleStatus,\n  hasProfileActivated,\n  numberTicketsOfUser = 0,\n  isLastPhase = false,\n}: getStepperStatusType): StepStatus => {\n  if (!hasProfileActivated) return 'future'\n  if (currentSaleStatus === SaleStatusEnum.Claim && numberTicketsOfUser === 0 && !isLastPhase) return 'past'\n\n  const status = getEventStepStatus({\n    saleStatus: currentSaleStatus,\n    eventStatus,\n  })\n\n  return eventStatusMapping[status]\n}\n","import React from 'react'\nimport { Button } from '@pancakeswap/uikit'\nimport { SaleStatusEnum, UserStatusEnum } from 'views/PancakeSquad/types'\nimport ActivateProfileButton from '../Buttons/ActivateProfile'\nimport BuyTicketsButtons from '../Buttons/BuyTickets'\nimport EndEventButtons from '../Buttons/EndEvent'\nimport MintButton from '../Buttons/Mint'\nimport ReadyText from '../Header/ReadyText'\nimport { EventStepsType } from './types'\nimport { getStepperStatus } from './utils'\n\nconst stepsConfigBuilder = ({ t, userInfos, eventInfos, userStatus, account, theme, cakeBalance }: EventStepsType) => {\n  const { maxPerAddress, maxPerTransaction, maxSupply, pricePerTicket } = eventInfos || {}\n  const {\n    canClaimForGen0,\n    ticketsOfUser,\n    numberTicketsUsedForGen0,\n    numberTicketsOfUser,\n    numberTicketsForGen0,\n    numberTokensOfUser,\n  } = userInfos || {}\n\n  const { saleStatus, totalTicketsDistributed, totalSupplyMinted, startTimestamp } = eventInfos || {}\n\n  const hasProfileActivated = [UserStatusEnum.PROFILE_ACTIVE, UserStatusEnum.PROFILE_ACTIVE_GEN0].includes(userStatus)\n  const isBuyPhaseFinished = totalTicketsDistributed === maxSupply\n  const isMintingFinished = totalSupplyMinted === maxSupply\n  const hasData = !!eventInfos && !!userInfos\n\n  return [\n    {\n      id: 1,\n      status: getStepperStatus({\n        saleStatus,\n        hasProfileActivated,\n        eventStatus: [SaleStatusEnum.Pending, SaleStatusEnum.Premint],\n      }),\n      title: t('Activate your profile'),\n      bodyText: [t('You’ll need an active PancakeSwap Profile to buy Minting Tickets and mint a Pancake Squad NFT!')],\n      buttons: (\n        <>\n          <ActivateProfileButton userStatus={userStatus} t={t} />\n          {hasProfileActivated && <ReadyText text={t(\"You're all set!\")} />}\n        </>\n      ),\n    },\n    {\n      id: 2,\n      status: getStepperStatus({\n        saleStatus,\n        hasProfileActivated,\n        eventStatus: [SaleStatusEnum.Pending, SaleStatusEnum.Premint],\n      }),\n      title: t('Hold CAKE'),\n      bodyText: [t('Each NFT costs CAKE to mint. Remember you also need BNB to cover transaction fees too!')],\n      buttons: (\n        <>\n          <Button\n            as=\"a\"\n            href=\"https://pancakeswap.finance/swap?outputCurrency=0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82\"\n            target=\"_blank\"\n            width=\"100%\"\n          >\n            {t('Buy CAKE')}\n          </Button>\n        </>\n      ),\n    },\n    {\n      id: 3,\n      status: getStepperStatus({\n        saleStatus,\n        hasProfileActivated,\n        eventStatus: [SaleStatusEnum.Presale, SaleStatusEnum.Sale],\n      }),\n      title: t('Buy Squad Tickets'),\n      bodyText: [\n        t('Buy Squad Tickets, while stocks last. You’ll use them in step 4.'),\n        `04:00 UTC, Oct. 7 ${t(\n          'Pre-sale: Wallets which held “Gen 0” Pancake Bunnies NFTs (bunnyID 0,1,2,3,4) at a snapshot taken some time between 12 and 2 hours before the presale begins can purchase one Squad Ticket per Gen 0 NFT.',\n        )}`,\n        `08:00 UTC, Oct. 7 ${t(\n          'Public Sale: Any wallet with an active Pancake Profile can purchase up to 10 Squad Tickets, while stocks last.',\n        )}`,\n      ],\n      buttons: (\n        <>\n          {hasData && (\n            <BuyTicketsButtons\n              t={t}\n              account={account}\n              theme={theme}\n              userStatus={userStatus}\n              saleStatus={saleStatus}\n              canClaimForGen0={canClaimForGen0}\n              maxPerAddress={maxPerAddress}\n              numberTicketsOfUser={numberTicketsOfUser}\n              numberTicketsUsedForGen0={numberTicketsUsedForGen0}\n              cakeBalance={cakeBalance}\n              maxPerTransaction={maxPerTransaction}\n              numberTicketsForGen0={numberTicketsForGen0}\n              pricePerTicket={pricePerTicket}\n              startTimestamp={startTimestamp}\n            />\n          )}\n          {isBuyPhaseFinished && hasData && <ReadyText mt=\"16px\" text={t('Phase Complete!')} />}\n        </>\n      ),\n    },\n    {\n      id: 4,\n      status: getStepperStatus({\n        saleStatus,\n        hasProfileActivated,\n        eventStatus: [SaleStatusEnum.Claim],\n        numberTicketsOfUser,\n      }),\n      title: t('Claim Phase'),\n      bodyText: [\n        t('During this phase, any wallet holding a Squad Ticket can redeem their ticket to claim a Pancake Squad NFT.'),\n      ],\n      buttons: (\n        <>\n          {hasData && (\n            <MintButton\n              t={t}\n              theme={theme}\n              saleStatus={saleStatus}\n              numberTicketsOfUser={numberTicketsOfUser}\n              numberTokensOfUser={numberTokensOfUser}\n              ticketsOfUser={ticketsOfUser}\n            />\n          )}\n          {isMintingFinished && hasData && <ReadyText mt=\"16px\" text={t('Phase Complete!')} />}\n        </>\n      ),\n    },\n    {\n      id: 5,\n      status: getStepperStatus({\n        saleStatus,\n        hasProfileActivated,\n        eventStatus: [SaleStatusEnum.Claim],\n        isLastPhase: true,\n      }),\n      title: t('Wait for the Reveal'),\n      bodyText: [\n        t('It’ll take a few days before your bunny’s image is revealed. Just hold tight and wait for the final image!'),\n        t('Trading will open before the images are live, but you’ll still be able to check the bunnies’ stats.'),\n      ],\n      buttons: (\n        <>\n          {hasData && (\n            <EndEventButtons\n              t={t}\n              saleStatus={saleStatus}\n              userStatus={userStatus}\n              maxSupply={maxSupply}\n              totalSupplyMinted={totalSupplyMinted}\n              numberTokensOfUser={numberTokensOfUser}\n              account={account}\n            />\n          )}\n        </>\n      ),\n    },\n  ]\n}\n\nexport default stepsConfigBuilder\n","import { Flex } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledEventStepsSectionContainer = styled(Flex)<{ $isDark: boolean }>`\n  position: relative;\n  background: ${({ $isDark }) =>\n    $isDark\n      ? 'linear-gradient(180deg, #0B4576 0%, #091115 100%)'\n      : 'linear-gradient(180deg, #6fb6f1 0%, #eaf2f6 100%)'};\n  z-index: 0;\n`\n\nexport const StyledBunniesSquadImg = styled.img`\n  position: absolute;\n  bottom: 4px;\n`\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Button, Card, CardBody, Flex, Step, Stepper, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { StyledWaveContainer, LandingBodyWrapper } from 'views/PancakeSquad/styles'\nimport useTheme from 'hooks/useTheme'\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\nimport EventStepsBottomWave from '../../assets/EventStepsBottomWave'\nimport EventStepsTopWave from '../../assets/EventStepsTopWave'\nimport stepsConfigBuilder from './config'\nimport { StyledBunniesSquadImg, StyledEventStepsSectionContainer } from './styles'\nimport { EventStepsProps } from './types'\n\nconst EventStepsSection: React.FC<EventStepsProps> = ({ eventInfos, userInfos, isLoading, userStatus, account }) => {\n  const { t } = useTranslation()\n  const { theme, isDark } = useTheme()\n  const { balance: cakeBalance } = useGetCakeBalance()\n  const stepsConfig = stepsConfigBuilder({ t, eventInfos, userInfos, userStatus, account, theme, cakeBalance })\n  const isMintingFinished = userInfos && eventInfos && eventInfos.maxSupply === eventInfos.totalSupplyMinted\n  return (\n    <StyledEventStepsSectionContainer justifyContent=\"center\" $isDark={isDark}>\n      <StyledWaveContainer top=\"-13px\">\n        <EventStepsTopWave isDark={isDark} />\n      </StyledWaveContainer>\n      <LandingBodyWrapper flexDirection=\"column\" alignItems=\"center\" py=\"64px\">\n        <Text color=\"invertedContrast\" textAlign=\"center\" fontSize=\"40px\" mb=\"64px\" bold>\n          {t('Sounds great, how can I get one?')}\n        </Text>\n        <Box mb={['80px', null, null, '170px']}>\n          {isMintingFinished ? (\n            <Flex flexDirection=\"column\" alignItems=\"center\">\n              <Text fontSize=\"16px\" color=\"text\" textAlign=\"center\">\n                {t('The minting period is now over: all 10,000 bunnies have now been minted.')}\n              </Text>\n              <Text fontSize=\"16px\" color=\"text\" textAlign=\"center\" mb=\"64px\">\n                {t('Head to the NFT Market to buy!')}\n              </Text>\n              <Box>\n                <Button as={Link} to=\"/nfts\">\n                  {t('View market')}\n                </Button>\n              </Box>\n            </Flex>\n          ) : (\n            <Stepper>\n              {stepsConfig.map((step, index) => (\n                <Step\n                  key={step.id}\n                  index={index}\n                  statusFirstPart={step.status}\n                  statusSecondPart={stepsConfig[index + 1]?.status}\n                >\n                  <Card>\n                    <CardBody>\n                      <Box maxWidth=\"388px\">\n                        <Text color=\"secondary\" fontSize=\"20px\" mb=\"16px\" bold>\n                          {step.title}\n                        </Text>\n                        {step.bodyText.map((text) => (\n                          <Text key={text} color=\"textSubtle\" mb=\"16px\">\n                            {text}\n                          </Text>\n                        ))}\n                        {isLoading ? null : step.buttons}\n                      </Box>\n                    </CardBody>\n                  </Card>\n                </Step>\n              ))}\n            </Stepper>\n          )}\n        </Box>\n      </LandingBodyWrapper>\n      <StyledWaveContainer bottom=\"-3px\">\n        <Flex justifyContent=\"center\">\n          <StyledBunniesSquadImg src=\"/images/pancakeSquad/squadRow.png\" alt=\"pancake bunnies squad\" />\n        </Flex>\n        <EventStepsBottomWave isDark={isDark} />\n      </StyledWaveContainer>\n    </StyledEventStepsSectionContainer>\n  )\n}\n\nexport default EventStepsSection\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\n\ntype FAQsType = {\n  t: ContextApi['t']\n}\n\nconst config = ({ t }: FAQsType) => [\n  {\n    title: t('What’s the Smart Contract?'),\n    description: [\n      <Text key={1} color=\"textSubtle\">\n        {t('The smart contract address will be released soon before the sale starts.')}\n      </Text>,\n    ],\n  },\n  {\n    title: t('I can’t see my NFT’s picture!'),\n    description: [\n      t(\n        'Wait for the reveal! After all 10,000 members of the Pancake Squad have been minted, their images will remain hidden for a few days. Just be patient :)',\n      ),\n    ],\n  },\n  {\n    title: t('How many can I mint?'),\n    description: [\n      t('The max limit per wallet is 10 NFTs.'),\n      t(\n        'Users holding Gen 0 Pancake Bunny NFTs at the snapshot may also purchase one additional Pancake Squad NFT in the presale for each Pancake Bunny they hold.',\n      ),\n      t(\n        'For example, if you have 5 Gen 0 bunnies, you can buy 5 minting tickets in the presale, then max. 10 in the public sale.',\n      ),\n    ],\n  },\n  {\n    title: t('Where do the fees go?'),\n    description: [t('100% of CAKE spent on Pancake Squad NFTs will be burned as part of our weekly CAKE burn.')],\n  },\n  {\n    title: t('How are the NFTs randomly distributed?'),\n    description: [\n      t(\n        'Once all 10,000 Squad Tickets have been bought, Chainlink VRF will be used to randomly allocate the pre-generated NFTs to the purchased Tickets. Squad Tickets are allocated IDs numbered in order of their purchase.',\n      ),\n      t(\n        'Once all 10,000 have been sold, VRF will pick numbers from 0 to 9999, which will be used to shift the Squad Ticket ID. This will ensure that the distribution of rare NFTs will be randomized, and prevents “sniping” of specific NFTs during the pre-sale or public sale phases.',\n      ),\n    ],\n  },\n  {\n    title: t('What’s the value of each NFT?'),\n    description: [\n      t(\n        'Value is subjective, but since different traits have different levels of rarity, you can expect bunnies with rarer traits to trade for higher prices than others. If you’re planning to sell, check the NFT market for the price of bunnies with a similarly rare traits to yours.',\n      ),\n    ],\n  },\n]\nexport default config\n","import { Flex, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledFaqSection = styled(Flex)`\n  position: relative;\n  background: ${({ theme }) => theme.colors.background};\n`\n\nexport const StyledDetailsWrapper = styled.div`\n  order: 1;\n  margin-bottom: 40px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    order: 2;\n    margin-bottom: 0;\n    margin-left: 40px;\n  }\n`\n\nexport const StyledLinkFAQs = styled(Text)`\n  &:hover {\n    text-decoration: underline;\n  }\n`\n","import React from 'react'\nimport { Text, Heading, Card, CardHeader, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LandingBodyWrapper } from 'views/PancakeSquad/styles'\nimport FoldableText from 'components/FoldableSection/FoldableText'\nimport configBuilder from './config'\nimport { StyledFaqSection, StyledDetailsWrapper } from './styles'\n\nconst FaqSection = () => {\n  const { t } = useTranslation()\n  const config = configBuilder({ t })\n\n  return (\n    <StyledFaqSection justifyContent=\"center\">\n      <LandingBodyWrapper py=\"64px\">\n        <StyledDetailsWrapper>\n          <Card>\n            <CardHeader>\n              <Heading scale=\"lg\" color=\"secondary\">\n                {t('FAQs')}\n              </Heading>\n            </CardHeader>\n            <CardBody>\n              {config.map(({ title, description }, i, { length }) => (\n                <FoldableText key={title} id={title} mb={i + 1 === length ? '' : '24px'} title={title}>\n                  {description.map((desc) => {\n                    return typeof desc === 'string' ? (\n                      <Text key={desc} color=\"textSubtle\" as=\"p\">\n                        {desc}\n                      </Text>\n                    ) : (\n                      desc\n                    )\n                  })}\n                </FoldableText>\n              ))}\n            </CardBody>\n          </Card>\n        </StyledDetailsWrapper>\n      </LandingBodyWrapper>\n    </StyledFaqSection>\n  )\n}\n\nexport default FaqSection\n","import { Svg, SvgProps } from '@pancakeswap/uikit'\nimport * as React from 'react'\n\nconst Icon: React.FC<SvgProps & { isDark: boolean }> = ({ isDark, ...props }) => {\n  return (\n    <Svg viewBox=\"0 0 1280 16\" preserveAspectRatio=\"none\" {...props}>\n      <path\n        d=\"M0 16V0c159.43 9.206 387.163 14.966 640 14.966S1120.57 9.206 1280 0v16H0z\"\n        fill=\"url(#squad_header_bottom_wave)\"\n      />\n      <defs>\n        <linearGradient\n          id=\"squad_header_bottom_wave\"\n          x1={174.5}\n          y1={15.999}\n          x2={1233.5}\n          y2={16}\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor={isDark ? '#313D5C' : '#E5FDFF'} />\n          <stop offset={1} stopColor={isDark ? '#3D2A54' : '#F3EFFF'} />\n        </linearGradient>\n      </defs>\n    </Svg>\n  )\n}\n\nexport default Icon\n","import { ContextApi } from 'contexts/Localization/types'\nimport { SaleStatusEnum } from './types'\nimport { getAltText, getEventStepStatus, getEventText } from './utils'\n\ntype nftSaleType = {\n  t: ContextApi['t']\n  saleStatus?: SaleStatusEnum\n  startTimestamp?: number\n}\n\nconst nftSaleConfigBuilder = ({ t, saleStatus, startTimestamp }: nftSaleType) =>\n  saleStatus !== undefined\n    ? [\n        {\n          status: getEventStepStatus({ saleStatus, eventStatus: [SaleStatusEnum.Pending, SaleStatusEnum.Premint] }),\n          text: getEventText({ saleStatus, eventStatus: [SaleStatusEnum.Pending, SaleStatusEnum.Premint], t }),\n          infoText: t(\n            'Activate your profile and make sure you have at least the cost of 1 NFT in your wallet to buy a Squad Ticket.',\n          ),\n        },\n        {\n          status: getEventStepStatus({ saleStatus, eventStatus: [SaleStatusEnum.Presale], startTimestamp }),\n          text: getEventText({ saleStatus, eventStatus: [SaleStatusEnum.Presale], startTimestamp, t }),\n          altText: getAltText({ t, saleStatus, eventStatus: [SaleStatusEnum.Presale], startTimestamp }),\n          infoText: t(\n            'Pre-sale: Wallets which held “Gen 0” Pancake Bunnies NFTs (bunnyID 0,1,2,3,4) at a snapshot taken some time between 12 and 2 hours before the presale begins can purchase one Squad Ticket per Gen 0 NFT.',\n          ),\n        },\n        {\n          status: getEventStepStatus({\n            saleStatus,\n            eventStatus: [SaleStatusEnum.Sale, SaleStatusEnum.DrawingRandomness],\n            startTimestamp,\n          }),\n          text: getEventText({\n            saleStatus,\n            startTimestamp,\n            eventStatus: [SaleStatusEnum.Sale, SaleStatusEnum.DrawingRandomness],\n            t,\n          }),\n          altText: getAltText({\n            t,\n            saleStatus,\n            eventStatus: [SaleStatusEnum.Sale, SaleStatusEnum.DrawingRandomness],\n            startTimestamp,\n          }),\n          infoText: t(\n            'Public Sale: Any wallet with an active Pancake Profile can purchase up to 10 Squad Tickets, while stocks last.',\n          ),\n        },\n        {\n          status: getEventStepStatus({ saleStatus, eventStatus: [SaleStatusEnum.Claim] }),\n          text: getEventText({ saleStatus, eventStatus: [SaleStatusEnum.Claim], t }),\n          altText: getAltText({ t, saleStatus, eventStatus: [SaleStatusEnum.Claim] }),\n          infoText: t(\n            'During this phase, any wallet holding a Squad Ticket can redeem their ticket to mint a Pancake Squad NFT.',\n          ),\n        },\n      ]\n    : []\n\nexport default nftSaleConfigBuilder\n","import { SaleStatusEnum, UserStatusEnum } from 'views/PancakeSquad/types'\nimport { ButtonsEnum } from './types'\n\ntype getCurrentButtonType = {\n  saleStatus: SaleStatusEnum\n  userStatus: UserStatusEnum\n  numberTicketsOfUser: number\n}\n\nexport const getCurrentButton = ({\n  userStatus,\n  saleStatus,\n  numberTicketsOfUser,\n}: getCurrentButtonType): ButtonsEnum => {\n  const isBuyingFinished = saleStatus > SaleStatusEnum.Sale\n  if (userStatus === UserStatusEnum.NO_PROFILE && !isBuyingFinished) return ButtonsEnum.ACTIVATE\n  if (saleStatus === SaleStatusEnum.Presale || saleStatus === SaleStatusEnum.Sale) return ButtonsEnum.BUY\n  if (saleStatus === SaleStatusEnum.Claim && numberTicketsOfUser > 0) return ButtonsEnum.MINT\n  if (saleStatus === SaleStatusEnum.Claim) return ButtonsEnum.END\n\n  return ButtonsEnum.NONE\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react'\nimport { BigNumber } from 'ethers'\nimport { Flex } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { DefaultTheme } from 'styled-components'\nimport { SaleStatusEnum, UserStatusEnum } from '../../types'\nimport BuyTicketsButtons from '../Buttons/BuyTickets'\nimport MintButton from '../Buttons/Mint'\nimport EndEventButtons from '../Buttons/EndEvent'\nimport ActivateProfileButton from '../Buttons/ActivateProfile'\nimport { getCurrentButton } from './utils'\nimport { ButtonsEnum } from './types'\n\nexport type CtaButtonsProps = {\n  t: ContextApi['t']\n  account: string\n  saleStatus: SaleStatusEnum\n  userStatus: UserStatusEnum\n  theme: DefaultTheme\n  canClaimForGen0: boolean\n  maxPerAddress: number\n  maxPerTransaction: number\n  numberTicketsOfUser: number\n  numberTicketsForGen0: number\n  numberTicketsUsedForGen0: number\n  maxSupply: number\n  totalSupplyMinted: number\n  numberTokensOfUser: number\n  startTimestamp: number\n  cakeBalance: BigNumber\n  pricePerTicket: BigNumber\n  ticketsOfUser: BigNumber[]\n}\n\nconst CtaButtons: React.FC<CtaButtonsProps> = ({\n  t,\n  account,\n  saleStatus,\n  userStatus,\n  theme,\n  canClaimForGen0,\n  maxPerAddress,\n  maxPerTransaction,\n  numberTicketsOfUser,\n  numberTicketsForGen0,\n  numberTicketsUsedForGen0,\n  numberTokensOfUser,\n  startTimestamp,\n  maxSupply,\n  totalSupplyMinted,\n  cakeBalance,\n  pricePerTicket,\n  ticketsOfUser,\n}) => {\n  const buttonType = getCurrentButton({ numberTicketsOfUser, saleStatus, userStatus })\n  return (\n    <>\n      <Flex>\n        {buttonType === ButtonsEnum.ACTIVATE && <ActivateProfileButton userStatus={userStatus} t={t} />}\n        {buttonType === ButtonsEnum.BUY && (\n          <BuyTicketsButtons\n            t={t}\n            account={account}\n            theme={theme}\n            userStatus={userStatus}\n            saleStatus={saleStatus}\n            canClaimForGen0={canClaimForGen0}\n            maxPerAddress={maxPerAddress}\n            numberTicketsOfUser={numberTicketsOfUser}\n            numberTicketsUsedForGen0={numberTicketsUsedForGen0}\n            cakeBalance={cakeBalance}\n            maxPerTransaction={maxPerTransaction}\n            numberTicketsForGen0={numberTicketsForGen0}\n            pricePerTicket={pricePerTicket}\n            startTimestamp={startTimestamp}\n          />\n        )}\n        {buttonType === ButtonsEnum.MINT && (\n          <MintButton\n            t={t}\n            theme={theme}\n            saleStatus={saleStatus}\n            numberTicketsOfUser={numberTicketsOfUser}\n            numberTokensOfUser={numberTokensOfUser}\n            ticketsOfUser={ticketsOfUser}\n          />\n        )}\n        {buttonType === ButtonsEnum.END && (\n          <EndEventButtons\n            t={t}\n            account={account}\n            saleStatus={saleStatus}\n            userStatus={userStatus}\n            maxSupply={maxSupply}\n            totalSupplyMinted={totalSupplyMinted}\n            numberTokensOfUser={numberTokensOfUser}\n          />\n        )}\n      </Flex>\n    </>\n  )\n}\n\nexport default CtaButtons\n","import { Flex, lightColors, Text } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport React from 'react'\nimport { SaleStatusEnum, UserStatusEnum } from '../../types'\n\ntype PreEventProps = {\n  t: ContextApi['t']\n  saleStatus: SaleStatusEnum\n  userStatus: UserStatusEnum\n  numberTicketsOfUser: number\n  numberTokensOfUser: number\n}\n\nconst MintText: React.FC<PreEventProps> = ({ t, saleStatus, userStatus, numberTicketsOfUser, numberTokensOfUser }) => {\n  const isUserUnconnected = userStatus === UserStatusEnum.UNCONNECTED\n  const displayMintText =\n    ((userStatus === UserStatusEnum.PROFILE_ACTIVE_GEN0 || numberTicketsOfUser > 0) &&\n      saleStatus === SaleStatusEnum.Presale) ||\n    saleStatus >= SaleStatusEnum.Sale\n  const hasNoTicketOrToken = numberTicketsOfUser === 0 && numberTokensOfUser === 0\n  return displayMintText ? (\n    <Flex flexDirection=\"column\" mb=\"24px\">\n      <Flex>\n        <Text fontSize=\"16px\" color={lightColors.invertedContrast} mr=\"2px\">\n          {t('Your Claim Tickets: ')}\n        </Text>\n        <Text fontSize=\"16px\" color={numberTicketsOfUser > 0 ? lightColors.warning : lightColors.failure} bold>\n          {numberTicketsOfUser}\n        </Text>\n      </Flex>\n      {saleStatus === SaleStatusEnum.Claim && (isUserUnconnected || hasNoTicketOrToken) && (\n        <Text mt=\"24px\" fontSize=\"16px\" color={lightColors.warning} bold>\n          {isUserUnconnected\n            ? t('Redeem Tickets to claim NFTs')\n            : t('Sorry, you can’t claim any NFTs! Better luck next time.')}\n        </Text>\n      )}\n    </Flex>\n  ) : null\n}\n\nexport default MintText\n","import React from 'react'\nimport { darkColors, Text } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { SaleStatusEnum, UserStatusEnum } from '../../types'\n\ntype PreEventProps = {\n  t: ContextApi['t']\n  saleStatus: SaleStatusEnum\n  userStatus: UserStatusEnum\n}\n\nconst preEventTextMapping = (t: ContextApi['t'], userStatus: UserStatusEnum) => {\n  switch (userStatus) {\n    case UserStatusEnum.UNCONNECTED:\n      return t('Are you ready?')\n    case UserStatusEnum.NO_PROFILE:\n      return t('You need a profile to participate!')\n    case UserStatusEnum.PROFILE_ACTIVE:\n      return t('You’re all set!')\n    case UserStatusEnum.PROFILE_ACTIVE_GEN0:\n      return t('You’re all set!')\n    default:\n      return ''\n  }\n}\n\nconst PreEventText: React.FC<PreEventProps> = ({ t, saleStatus, userStatus }) =>\n  [SaleStatusEnum.Pending, SaleStatusEnum.Premint].includes(saleStatus) ? (\n    <Text fontSize=\"16px\" color={darkColors.text}>\n      {preEventTextMapping(t, userStatus)}\n    </Text>\n  ) : null\n\nexport default PreEventText\n","import React from 'react'\nimport { Box, lightColors, Progress, Text } from '@pancakeswap/uikit'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { SaleStatusEnum, UserStatusEnum } from '../../types'\n\ntype PreEventProps = {\n  t: ContextApi['t']\n  saleStatus: SaleStatusEnum\n  userStatus: UserStatusEnum\n  totalTicketsDistributed: number\n  maxSupply: number\n  totalSupplyMinted: number\n}\n\nconst saleProgressTextMapping = (t: ContextApi['t'], saleStatus: SaleStatusEnum, remaining: string, total: string) => {\n  const data = {\n    remaining,\n    total,\n  }\n\n  switch (saleStatus) {\n    case SaleStatusEnum.Pending:\n    case SaleStatusEnum.Premint:\n      return ''\n    case SaleStatusEnum.Presale:\n      return t('%remaining% of %total% remaining', data)\n    case SaleStatusEnum.Sale:\n      return t('%remaining% of %total% remaining', data)\n    case SaleStatusEnum.DrawingRandomness:\n      return t('Randomizing NFT allocation with Chainlink', data)\n    case SaleStatusEnum.Claim:\n      return t('%remaining% of %total% claimed', data)\n    default:\n      return ''\n  }\n}\n\nconst SaleProgress: React.FC<PreEventProps> = ({\n  t,\n  saleStatus,\n  totalTicketsDistributed,\n  totalSupplyMinted,\n  maxSupply,\n}) => {\n  const displaySaleProgress = saleStatus > SaleStatusEnum.Premint\n  const isClaimingPhase = saleStatus === SaleStatusEnum.Claim\n  const supplyRemaining = maxSupply - totalTicketsDistributed\n  const remainingTickets = isClaimingPhase ? totalSupplyMinted : supplyRemaining\n  const supplyRemainingPercentage = Math.round((remainingTickets / maxSupply) * 100)\n  const isMintCompleted = totalSupplyMinted === maxSupply && isClaimingPhase\n  return displaySaleProgress ? (\n    <Box mb=\"24px\">\n      {isMintCompleted && (\n        <Text color={lightColors.warning} mb=\"40px\" bold>\n          {t('Claiming Complete!')}\n        </Text>\n      )}\n      <Text color={lightColors.invertedContrast} mb=\"24px\" bold>\n        {isMintCompleted\n          ? t('All 10,000 Pancake Squad NFTs have now been minted!')\n          : saleProgressTextMapping(t, saleStatus, remainingTickets.toString(), maxSupply.toString())}\n      </Text>\n      {!isMintCompleted && (\n        <Progress\n          variant=\"round\"\n          primaryStep={isClaimingPhase ? supplyRemainingPercentage : 100 - supplyRemainingPercentage}\n          useDark={false}\n        />\n      )}\n    </Box>\n  ) : null\n}\n\nexport default SaleProgress\n","import { Box, Flex, lightColors, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nexport const StyledSquadHeaderContainer = styled(Flex)`\n  position: relative;\n  background: linear-gradient(180deg, #8051d6 0%, #492286 100%);\n`\n\nexport const StyledSquadTitle = styled(Text)`\n  font-size: 40px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    font-size: 64px;\n  }\n`\n\nexport const StyledSquadEventBorder = styled(Box)`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 32px;\n`\n\nexport const StyledSquadEventContainer = styled(Flex)`\n  background: ${lightColors.text};\n  background-clip: padding-box;\n  border-radius: inherit;\n`\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, lightColors, Spinner, Text, Timeline } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCakeBalance } from 'hooks/useTokenBalance'\nimport useTheme from 'hooks/useTheme'\nimport { StyledWaveContainer } from 'views/PancakeSquad/styles'\nimport { UserStatusEnum } from 'views/PancakeSquad/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport HeaderBottomWave from '../../assets/HeaderBottomWave'\nimport nftSaleConfigBuilder from '../../config'\nimport CtaButtons from './CtaButtons'\nimport MintText from './MintText'\nimport PreEventText from './PreEventText'\nimport SaleProgress from './SaleProgress'\nimport {\n  StyledSquadEventBorder,\n  StyledSquadEventContainer,\n  StyledSquadHeaderContainer,\n  StyledSquadTitle,\n} from './styles'\nimport { PancakeSquadHeaderType } from './types'\n\nconst DEFAULT_CAKE_COST = 15\nconst DEFAULT_MAX_TICKETS = 10\n\nconst PancakeSquadHeader: React.FC<PancakeSquadHeaderType> = ({\n  userInfos,\n  eventInfos,\n  account,\n  userStatus,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  const { theme, isDark } = useTheme()\n  const { balance: cakeBalance } = useGetCakeBalance()\n  const displayEventBlock = !!eventInfos || isLoading\n  const {\n    ticketsOfUser,\n    numberTicketsUsedForGen0,\n    numberTicketsOfUser,\n    numberTicketsForGen0,\n    canClaimForGen0,\n    numberTokensOfUser,\n  } = userInfos || {}\n\n  const {\n    maxPerAddress,\n    maxPerTransaction,\n    maxSupply,\n    pricePerTicket,\n    saleStatus,\n    totalTicketsDistributed,\n    totalSupplyMinted,\n    startTimestamp,\n  } = eventInfos || {}\n\n  return (\n    <StyledSquadHeaderContainer\n      pt={['16px', null, null, '40px']}\n      px={['16px', null, null, '80px']}\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Flex width=\"100%\">\n        <Link to=\"/nfts\">\n          <Text color=\"primary\" bold>{`< ${t('NFT Market')}`}</Text>\n        </Link>\n      </Flex>\n      <StyledSquadTitle my=\"32px\" color={lightColors.invertedContrast} bold textAlign=\"center\">\n        {t('Pancake Squad')}\n      </StyledSquadTitle>\n      <Text color={lightColors.warning} textAlign=\"center\" bold>\n        {`${t('Presale:')} 04:00 UTC, Oct. 7`}\n      </Text>\n      <Text color={lightColors.warning} textAlign=\"center\" bold>\n        {`${t('Public Sale:')} 08:00 UTC, Oct. 7`}\n      </Text>\n      <Text color={lightColors.warning} textAlign=\"center\" bold>\n        {t('Mint Cost: %minCost% CAKE each', {\n          minCost: DEFAULT_CAKE_COST,\n        })}\n      </Text>\n      <Text color={lightColors.warning} textAlign=\"center\" bold>\n        {t('Max per wallet: %maxPerWallet%', { maxPerWallet: DEFAULT_MAX_TICKETS })}\n      </Text>\n      <Text color={lightColors.invertedContrast} textAlign=\"center\">\n        {t('PancakeSwap’s first official generative NFT collection.')}\n      </Text>\n      <Text color={lightColors.invertedContrast} mb={!displayEventBlock ? '80px' : '32px'} textAlign=\"center\">\n        {t('Join the squad.')}\n      </Text>\n      {displayEventBlock && (\n        <StyledSquadEventBorder mb=\"56px\">\n          <StyledSquadEventContainer m=\"1px\" p=\"32px\">\n            <Flex flexDirection={['column', null, 'row']}>\n              {eventInfos && (\n                <Box mr={['0', null, null, '100px']}>\n                  <Timeline\n                    events={nftSaleConfigBuilder({\n                      t,\n                      saleStatus,\n                      startTimestamp,\n                    })}\n                    useDark={false}\n                  />\n                </Box>\n              )}\n              <Flex flexDirection=\"column\">\n                {eventInfos && (\n                  <>\n                    <PreEventText t={t} userStatus={userStatus} saleStatus={saleStatus} />\n                    <SaleProgress\n                      t={t}\n                      userStatus={userStatus}\n                      saleStatus={saleStatus}\n                      totalTicketsDistributed={totalTicketsDistributed}\n                      maxSupply={maxSupply}\n                      totalSupplyMinted={totalSupplyMinted}\n                    />\n                    {userInfos && (\n                      <MintText\n                        t={t}\n                        userStatus={userStatus}\n                        saleStatus={saleStatus}\n                        numberTicketsOfUser={numberTicketsOfUser}\n                        numberTokensOfUser={numberTokensOfUser}\n                      />\n                    )}\n                    {userInfos && (\n                      <CtaButtons\n                        t={t}\n                        account={account}\n                        theme={theme}\n                        userStatus={userStatus}\n                        saleStatus={saleStatus}\n                        numberTokensOfUser={numberTokensOfUser}\n                        canClaimForGen0={canClaimForGen0}\n                        maxPerAddress={maxPerAddress}\n                        maxSupply={maxSupply}\n                        numberTicketsOfUser={numberTicketsOfUser}\n                        numberTicketsUsedForGen0={numberTicketsUsedForGen0}\n                        totalSupplyMinted={totalSupplyMinted}\n                        cakeBalance={cakeBalance}\n                        maxPerTransaction={maxPerTransaction}\n                        numberTicketsForGen0={numberTicketsForGen0}\n                        pricePerTicket={pricePerTicket}\n                        ticketsOfUser={ticketsOfUser}\n                        startTimestamp={startTimestamp}\n                      />\n                    )}\n                  </>\n                )}\n                {isLoading &&\n                  (userStatus === UserStatusEnum.UNCONNECTED ? (\n                    <ConnectWalletButton userStatus={userStatus} />\n                  ) : (\n                    <Spinner />\n                  ))}\n              </Flex>\n            </Flex>\n          </StyledSquadEventContainer>\n        </StyledSquadEventBorder>\n      )}\n      <StyledWaveContainer bottom=\"-3px\">\n        <HeaderBottomWave isDark={isDark} />\n      </StyledWaveContainer>\n    </StyledSquadHeaderContainer>\n  )\n}\n\nexport default PancakeSquadHeader\n","import { useEffect } from 'react'\nimport { getNftSaleAddress } from 'utils/addressHelpers'\nimport { getPancakeSquadContract } from 'utils/contractHelpers'\nimport { multicallv2 } from 'utils/multicall'\nimport { BigNumber } from 'ethers'\nimport nftSaleAbi from 'config/abi/nftSale.json'\n\nconst useEventInfos = ({ refreshCounter, setCallback }) => {\n  useEffect(() => {\n    const fetchEventInfos = async () => {\n      try {\n        const nftSaleAddress = getNftSaleAddress()\n        const pancakeSquadContract = getPancakeSquadContract()\n\n        const calls = [\n          'maxSupply',\n          'maxPerAddress',\n          'pricePerTicket',\n          'maxPerTransaction',\n          'totalTicketsDistributed',\n          'currentStatus',\n          'startTimestamp',\n        ].map((method) => ({\n          address: nftSaleAddress,\n          name: method,\n        }))\n\n        const [\n          [currentMaxSupply],\n          [currentMaxPerAddress],\n          [currentPricePerTicket],\n          [currentMaxPerTransaction],\n          [currentTotalTicketsDistributed],\n          [currentSaleStatus],\n          [currentStartTimestamp],\n        ] = await multicallv2(nftSaleAbi, calls)\n\n        const currentTotalSupplyMinted = await pancakeSquadContract.totalSupply()\n\n        setCallback({\n          maxSupply: currentMaxSupply.toNumber(),\n          maxPerAddress: currentMaxPerAddress.toNumber(),\n          pricePerTicket: BigNumber.from(currentPricePerTicket),\n          maxPerTransaction: currentMaxPerTransaction.toNumber(),\n          totalTicketsDistributed: currentTotalTicketsDistributed.toNumber(),\n          saleStatus: currentSaleStatus,\n          startTimestamp: Number(currentStartTimestamp.toString().padEnd(13, '0')),\n          totalSupplyMinted: currentTotalSupplyMinted.toNumber(),\n        })\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (nftSaleAbi.length > 0) {\n      fetchEventInfos()\n    }\n  }, [refreshCounter, setCallback])\n}\n\nexport default useEventInfos\n","import { useEffect } from 'react'\nimport { getNftSaleAddress } from 'utils/addressHelpers'\nimport { getPancakeSquadContract } from 'utils/contractHelpers'\nimport { multicallv2 } from 'utils/multicall'\nimport nftSaleAbi from 'config/abi/nftSale.json'\n\nconst useUserInfos = ({ account, refreshCounter, setCallback }) => {\n  useEffect(() => {\n    const fetchUserInfos = async () => {\n      try {\n        const nftSaleAddress = getNftSaleAddress()\n        const pancakeSquadContract = getPancakeSquadContract()\n\n        if (account) {\n          const calls = [\n            'canClaimForGen0',\n            'numberTicketsForGen0',\n            'numberTicketsUsedForGen0',\n            'viewNumberTicketsOfUser',\n            'ticketsOfUserBySize',\n          ].map((method) => ({\n            address: nftSaleAddress,\n            name: method,\n            params: method === 'ticketsOfUserBySize' ? [account, 0, 600] : [account],\n          }))\n\n          const [\n            [currentCanClaimForGen0],\n            [currentNumberTicketsForGen0],\n            [currentNumberTicketsUsedForGen0],\n            [currentNumberTicketsOfUser],\n            [currentTicketsOfUser],\n          ] = await multicallv2(nftSaleAbi, calls)\n\n          const currentNumberTokensOfUser = await pancakeSquadContract.balanceOf(account)\n\n          setCallback({\n            canClaimForGen0: currentCanClaimForGen0,\n            numberTicketsForGen0: currentNumberTicketsForGen0.toNumber(),\n            numberTicketsUsedForGen0: currentNumberTicketsUsedForGen0.toNumber(),\n            numberTicketsOfUser: currentNumberTicketsOfUser.toNumber(),\n            ticketsOfUser: currentTicketsOfUser,\n            numberTokensOfUser: currentNumberTokensOfUser.toNumber(),\n          })\n        }\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    if (nftSaleAbi.length > 0) {\n      fetchUserInfos()\n    }\n  }, [account, refreshCounter, setCallback])\n}\n\nexport default useUserInfos\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport nftSaleAbi from 'config/abi/nftSale.json'\nimport { useProfile } from 'state/profile/hooks'\nimport ArtistSection from './components/ArtistSection'\nimport BunniesSection from './components/BunniesSection'\nimport EventDescriptionSection from './components/EventDescriptionSection'\nimport EventStepsSection from './components/EventStepsSection'\nimport FaqSection from './components/FaqSection'\nimport PancakeSquadHeader from './components/Header'\nimport { PancakeSquadContext } from './context'\nimport useEventInfos from './hooks/useEventInfos'\nimport useUserInfos from './hooks/useUserInfos'\nimport { StyledSquadContainer } from './styles'\nimport { EventInfos, UserInfos } from './types'\nimport { getUserStatus } from './utils'\n\nconst REFRESH_INTERVAL = 4000\n\nconst PancakeSquad: React.FC = () => {\n  const { account } = useWeb3React()\n  const { hasProfile, isInitialized } = useProfile()\n  const [eventInfos, setEventInfo] = useState<EventInfos>()\n  const [userInfos, setUserInfos] = useState<UserInfos>()\n  const [refreshCounter, setRefreshCounter] = useState(0)\n  const [isUserEnabled, setIsUserEnabled] = useState(false)\n  const isLoading = (!eventInfos || !userInfos) && nftSaleAbi?.length > 0\n\n  useEventInfos({ setCallback: setEventInfo, refreshCounter })\n  useUserInfos({ setCallback: setUserInfos, refreshCounter, account })\n\n  const userStatus = getUserStatus({\n    account,\n    hasActiveProfile: hasProfile && isInitialized,\n    hasGen0: userInfos?.canClaimForGen0,\n  })\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRefreshCounter((prev) => prev + 1)\n    }, REFRESH_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    if (account) {\n      setIsUserEnabled(false)\n      setUserInfos(undefined)\n    }\n  }, [account])\n\n  return (\n    <PancakeSquadContext.Provider value={{ isUserEnabled, setIsUserEnabled }}>\n      <StyledSquadContainer>\n        <PancakeSquadHeader\n          account={account}\n          isLoading={isLoading}\n          userInfos={userInfos}\n          eventInfos={eventInfos}\n          userStatus={userStatus}\n        />\n        <BunniesSection />\n        <EventDescriptionSection />\n        <EventStepsSection\n          userInfos={userInfos}\n          eventInfos={eventInfos}\n          userStatus={userStatus}\n          isLoading={isLoading}\n          account={account}\n        />\n        <ArtistSection />\n        <FaqSection />\n      </StyledSquadContainer>\n    </PancakeSquadContext.Provider>\n  )\n}\n\nexport default PancakeSquad\n"],"sourceRoot":""}