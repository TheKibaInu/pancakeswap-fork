{"version":3,"sources":["state/nftMarket/hooks.ts","hooks/useTokenBalance.ts","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","state/teams/hooks.ts","views/ProfileCreation/SelectionCard.tsx","../node_modules/lodash/_shuffleSelf.js","../node_modules/date-fns/esm/differenceInMilliseconds/index.js","../node_modules/date-fns/esm/compareAsc/index.js","../node_modules/date-fns/esm/_lib/cloneObject/index.js","../node_modules/lodash/shuffle.js","../node_modules/lodash/_arrayShuffle.js","../node_modules/lodash/_baseShuffle.js","../node_modules/date-fns/esm/differenceInSeconds/index.js","views/ProfileCreation/config.ts","views/ProfileCreation/contexts/ProfileCreationProvider.tsx","views/ProfileCreation/Header.tsx","views/ProfileCreation/WalletNotConnected.tsx","views/ProfileCreation/NextStepButton.tsx","views/ProfileCreation/contexts/hook.ts","views/ProfileCreation/Mint.tsx","views/ProfileCreation/ProfilePicture.tsx","views/ProfileCreation/TeamSelection.tsx","../node_modules/date-fns/esm/isLastDayOfMonth/index.js","../node_modules/date-fns/esm/differenceInMonths/index.js","../node_modules/date-fns/esm/formatDistance/index.js","views/ProfileCreation/UserName.tsx","views/ProfileCreation/ConfirmProfileCreationModal.tsx","views/ProfileCreation/Steps.tsx","views/ProfileCreation/index.tsx"],"names":["useFetchCollections","dispatch","useAppDispatch","useEffect","fetchCollections","useFetchCollection","collectionAddress","fetchCollection","useFetchByBunnyIdAndUpdate","bunnyId","useSelector","state","nftMarket","data","loadingState","latestPancakeBunniesUpdateAt","isUpdatingPancakeBunnies","existingBunniesInState","useGetAllBunniesByBunnyId","existingTokensWithBunnyId","map","nft","tokenId","allPancakeBunnies","useNftsFromCollection","pancakeBunniesAddress","allExistingPBTokenIds","firstBunny","length","existingMetadata","useMemo","name","description","collection","collectionName","image","fetchMorePancakeBunnies","orderDirection","fetchNewPBAndUpdateExisting","useLoadingState","useGetCollections","collections","useGetCollection","checksummedCollectionAddress","isAddress","nfts","filter","attributes","value","marketData","isTradable","useGetNFTInitializationState","initializationState","useUserNfts","user","useGetNftFilters","collectionFilter","filters","activeFilters","useGetNftFilterLoadingState","NftFilterLoadingState","IDLE","useGetNftOrdering","ordering","field","direction","useGetNftShowOnlyOnSale","showOnlyOnSale","FetchStatus","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","useState","balance","BIG_ZERO","fetchStatus","balanceState","setBalanceState","account","useWeb3React","fastRefresh","useRefresh","a","contract","getBep20Contract","balanceOf","res","BigNumber","toString","console","error","prev","fetchBalance","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getCakeContract","supply","fetchTotalSupply","useBurnedBalance","setBalance","useGetBnbBalance","setFetchStatus","ethers","from","useLastUpdated","lastUpdated","setLastUpdated","simpleRpcProvider","getBalance","walletBalance","refresh","useGetCakeBalance","tokens","cake","address","initialState","approvalState","confirmState","reducer","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","t","useTranslation","useReducer","handlePreApprove","useRef","toastError","useToast","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","hasApproveFailed","hasConfirmFailed","handleApprove","tx","wait","receipt","status","handleConfirm","params","ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","disabled","onClick","endIcon","undefined","isLoading","justifyContent","id","useFetchUserNfts","useProfile","profile","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","hasProfileNft","profileNftTokenId","profileNftCollectionAddress","profileNftWithCollectionAddress","nftLocation","NftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","useTeam","team","teams","fetchTeam","useTeams","fetchTeams","Label","label","isDisabled","Body","Children","StyledBackgroundImage","src","SelectionCard","isChecked","onChange","children","props","isSuccess","mb","checked","e","target","style","flex","baseRandom","require","module","exports","array","size","index","lastIndex","rand","differenceInMilliseconds","dirtyDateLeft","dirtyDateRight","requiredArgs","arguments","dateLeft","toDate","dateRight","getTime","compareAsc","diff","cloneObject","dirtyObject","assign","arrayShuffle","baseShuffle","isArray","copyArray","shuffleSelf","values","differenceInSeconds","Math","floor","ceil","MINT_COST","parseUnits","REGISTER_COST","STARTER_NFT_BUNNY_IDS","totalCost","add","allowance","mul","currentStep","teamId","selectedNft","userName","minimumCakeRequired","action","step","ProfileCreationContext","createContext","ProfileCreationProvider","isSubscribed","bunnyFactoryContract","getBunnyFactoryContract","canMint","fetchData","nextStep","setTeamId","setSelectedNft","setUserName","Provider","Wrapper","colors","textSubtle","steps","Header","useContext","as","scale","href","nftsBaseUrl","variant","translationKey","WalletNotConnected","ConnectWalletButton","NextStepButton","useProfileCreation","Mint","selectedBunnyId","setSelectedBunnyId","starterNfts","setStarterNfts","toastSuccess","useCake","useBunnyFactory","cakeBalance","hasMinimumCakeRequired","gte","callWithGasPrice","useCallWithGasPrice","getStarterNfts","getNftsFromCollectionApi","allPbTokens","response","fontSize","bold","num","formatUnits","thumbnail","Link","RouterLink","primary","NftWrapper","ProfilePicture","library","setIsApproved","setIsApproving","getErc721Contract","getSigner","getPancakeProfileAddress","INITIALIZED","to","marginLeft","walletNft","location","WALLET","Team","currentTeamId","handleTeamSelection","parseInt","teamValues","shuffle","Object","images","isJoinable","mr","users","toLocaleString","isLastDayOfMonth","dirtyDate","date","endOfDay","endOfMonth","differenceInMonths","sign","difference","abs","differenceInCalendarMonths","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","Number","MINUTES_IN_DAY","MINUTES_IN_MONTH","formatDistance","dirtyBaseDate","options","locale","defaultLocale","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","months","seconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","round","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","ExistingUserState","ConfirmProfileCreationModal","onDismiss","profileContract","toJSON","fetchProfile","Toast","txHash","transactionHash","title","InputWrap","Input","UIKitInput","Indicator","Flex","UserName","isAcknowledged","setIsAcknowledged","useWeb3Provider","existingUserState","setExistingUserState","isValid","setIsValid","setIsLoading","message","setMessage","useModal","onPresentConfirmProfileCreation","isUserCreated","CREATED","checkUsernameValidity","debounce","fetch","API_PROFILE","ok","json","signMessage","signature","method","headers","body","JSON","stringify","username","dateCreated","parseISO","created_at","Date","NEW","fetchUser","height","event","isWarning","minLength","maxLength","placeholder","py","minHeight","htmlFor","display","cursor","marginBottom","alignItems","ml","mt","Steps","TeamSelection","ProfileCreation","hasProfile","PageLoader","toLowerCase","Page"],"mappings":"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","file":"static/js/11.f847776d.chunk.js","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport { isAddress } from 'utils'\nimport { fetchCollection, fetchCollections, fetchNewPBAndUpdateExisting } from './reducer'\nimport { State } from '../types'\nimport { NftFilter, NftFilterLoadingState, NftToken, UserNftsState } from './types'\n\nconst MAX_GEN0_ID = 4\n\nexport const useFetchCollections = () => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollections())\n  }, [dispatch])\n}\n\nexport const useFetchCollection = (collectionAddress: string) => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(fetchCollection(collectionAddress))\n  }, [dispatch, collectionAddress])\n}\n\n// Returns a function that fetches more NFTs for specified bunny id\n// as well as updating existing PB NFTs in state\n// Note: PancakeBunny specific\nexport const useFetchByBunnyIdAndUpdate = (bunnyId: string) => {\n  const dispatch = useAppDispatch()\n\n  const { latestPancakeBunniesUpdateAt, isUpdatingPancakeBunnies } = useSelector(\n    (state: State) => state.nftMarket.data.loadingState,\n  )\n\n  // Extra guard in case market data shifts\n  // we don't wanna fetch same tokens multiple times\n  const existingBunniesInState = useGetAllBunniesByBunnyId(bunnyId)\n  const existingTokensWithBunnyId = existingBunniesInState ? existingBunniesInState.map((nft) => nft.tokenId) : []\n\n  const allPancakeBunnies = useNftsFromCollection(pancakeBunniesAddress)\n  const allExistingPBTokenIds = allPancakeBunnies ? allPancakeBunnies.map((nft) => nft.tokenId) : []\n\n  const firstBunny = existingBunniesInState.length > 0 ? existingBunniesInState[0] : null\n\n  // If we already have NFT with this bunny id in state - we can reuse its metadata without making API request\n  const existingMetadata = useMemo(() => {\n    return firstBunny\n      ? {\n          name: firstBunny.name,\n          description: firstBunny.description,\n          collection: { name: firstBunny.collectionName },\n          image: firstBunny.image,\n        }\n      : null\n  }, [firstBunny])\n\n  // This fetches more bunnies when called\n  const fetchMorePancakeBunnies = (orderDirection: 'asc' | 'desc') => {\n    dispatch(\n      fetchNewPBAndUpdateExisting({\n        bunnyId,\n        existingTokensWithBunnyId,\n        allExistingPBTokenIds,\n        existingMetadata,\n        orderDirection,\n      }),\n    )\n  }\n\n  return { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies }\n}\n\nexport const useLoadingState = () => {\n  return useSelector((state: State) => state.nftMarket.data.loadingState)\n}\n\nexport const useGetCollections = () => {\n  return useSelector((state: State) => state.nftMarket.data.collections)\n}\n\nexport const useGetCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const collections = useGetCollections()\n  return collections[checksummedCollectionAddress]\n}\n\nexport const useNftsFromCollection = (collectionAddress: string) => {\n  const checksummedCollectionAddress = isAddress(collectionAddress) || ''\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[checksummedCollectionAddress])\n  return nfts\n}\n\nexport const useGetAllBunniesByBunnyId = (bunnyId: string) => {\n  const nfts: NftToken[] = useSelector((state: State) => state.nftMarket.data.nfts[pancakeBunniesAddress])\n  return nfts ? nfts.filter((nft) => nft.attributes[0].value === bunnyId && nft.marketData.isTradable) : []\n}\n\nexport const useGetNFTInitializationState = () => {\n  return useSelector((state: State) => state.nftMarket.initializationState)\n}\n\nexport const useUserNfts = (): UserNftsState => {\n  return useSelector((state: State) => state.nftMarket.data.user)\n}\n\nexport const useHasGen0Nfts = (): boolean => {\n  const userNfts = useSelector((state: State) => state.nftMarket.data.user)\n  return userNfts.nfts.some((nft) => nft.attributes && Number(nft.attributes[0]?.value) <= MAX_GEN0_ID)\n}\n\nexport const useGetNftFilters = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.activeFilters : {}\n}\n\nexport const useGetNftFilterLoadingState = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.loadingState : NftFilterLoadingState.IDLE\n}\n\nexport const useGetNftOrdering = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.ordering : { field: 'currentAskPrice', direction: 'asc' as 'asc' | 'desc' }\n}\n\nexport const useGetNftShowOnlyOnSale = (collectionAddress: string) => {\n  const collectionFilter: NftFilter = useSelector((state: State) => state.nftMarket.data.filters[collectionAddress])\n  return collectionFilter ? collectionFilter.showOnlyOnSale : true\n}\n","import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport tokens from 'config/constants/tokens'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n  const [balance, setBalance] = useState(ethers.BigNumber.from(0))\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        const walletBalance = await simpleRpcProvider.getBalance(account)\n        setBalance(walletBalance)\n        setFetchStatus(FetchStatus.SUCCESS)\n      } catch {\n        setFetchStatus(FetchStatus.FAILED)\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance, setFetchStatus])\n\n  return { balance, fetchStatus, refresh: setLastUpdated }\n}\n\nexport const useGetCakeBalance = () => {\n  const { balance, fetchStatus } = useTokenBalance(tokens.cake.address)\n\n  // TODO: Remove ethers conversion once useTokenBalance is converted to ethers.BigNumber\n  return { balance: ethers.BigNumber.from(balance.toString()), fetchStatus }\n}\n\nexport default useTokenBalance\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt' }\n  | { type: 'approve_error' }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt' }\n  | { type: 'confirm_error' }\n\ninterface State {\n  approvalState: LoadingState\n  confirmState: LoadingState\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  confirmState: 'idle',\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n      }\n    default:\n      return state\n  }\n}\n\ninterface OnSuccessProps {\n  state: State\n  receipt: ethers.providers.TransactionReceipt\n}\n\ninterface ApproveConfirmTransaction {\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    hasApproveFailed: state.approvalState === 'fail',\n    hasConfirmFailed: state.confirmState === 'fail',\n    handleApprove: async () => {\n      try {\n        const tx = await onApprove()\n        dispatch({ type: 'approve_sending' })\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'approve_receipt' })\n          onApproveSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'approve_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n    handleConfirm: async (params = {}) => {\n      dispatch({ type: 'confirm_sending' })\n      try {\n        const tx = await onConfirm(params)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          dispatch({ type: 'confirm_receipt' })\n          onSuccess({ state, receipt })\n        }\n      } catch (error) {\n        dispatch({ type: 'confirm_error' })\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n  confirmLabel?: string\n  confirmId?: string\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n  confirmLabel,\n  confirmId,\n}) => {\n  const { t } = useTranslation()\n  const confirmButtonText = confirmLabel ?? t('Confirm')\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Enabling') : t('Enable')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            id={confirmId}\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : confirmButtonText}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              id={confirmId}\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : confirmButtonText}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Enabling') : t('Enable')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import { useEffect, useMemo } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useProfile } from 'state/profile/hooks'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useFetchUserNfts = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\n  const { userNftsInitializationState } = useUserNfts()\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\n\n  // Fetch on first load when profile fetch is resolved\n  const shouldFetch =\n    account &&\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\n    isProfileInitialized &&\n    !isProfileLoading\n\n  // Fetch on account / profile change, once profile fetch is resolved\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\n\n  useEffect(() => {\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\n    }\n  }, [\n    dispatch,\n    account,\n    shouldFetch,\n    hasAccountSwitched,\n    profileNftTokenId,\n    collections,\n    profileNftWithCollectionAddress,\n  ])\n}\n\nexport default useFetchUserNfts\n","import { useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { Team } from 'config/constants/types'\nimport { State, TeamsState } from '../types'\nimport { fetchTeam, fetchTeams } from '.'\n\nexport const useTeam = (id: number) => {\n  const team: Team = useSelector((state: State) => state.teams.data[id])\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeam(id))\n  }, [id, dispatch])\n\n  return team\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </Card>\n  )\n}\n\nexport default SelectionCard\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import { parseUnits } from '@ethersproject/units'\n\nexport const MINT_COST = parseUnits('1')\nexport const REGISTER_COST = parseUnits('0.5')\nexport const ALLOWANCE_MULTIPLIER = 5\nexport const STARTER_NFT_BUNNY_IDS = ['5', '6', '7', '8', '9'] // 'sleepy', 'dollop', 'twinkle', 'churro', 'sunny'\nexport const USERNAME_MIN_LENGTH = 3\nexport const USERNAME_MAX_LENGTH = 15\n","import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST.add(REGISTER_COST)\nconst allowance = totalCost.mul(ALLOWANCE_MULTIPLIER)\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  selectedNft: {\n    collectionAddress: null,\n    tokenId: null,\n  },\n  userName: '',\n  minimumCakeRequired: totalCost,\n  allowance,\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_selected_nft':\n      return {\n        ...state,\n        selectedNft: {\n          tokenId: action.tokenId,\n          collectionAddress: action.collectionAddress,\n        },\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.canMint(account)\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setSelectedNft: (tokenId: string, collectionAddress: string) =>\n        dispatch({ type: 'set_selected_nft', tokenId, collectionAddress }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Breadcrumbs, Heading, Text, Link, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Wrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-top: 32px;\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nconst steps = ['Get Starter Collectible', 'Set Profile Picture', 'Join Team', 'Set Name']\n\nconst Header: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentStep } = useContext(ProfileCreationContext)\n\n  return (\n    <Wrapper>\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"8px\" id=\"profile-setup-title\">\n        {t('Profile Setup')}\n      </Heading>\n      <Heading as=\"h2\" scale=\"lg\" mb=\"8px\">\n        {t('Show off your stats and collectibles with your unique profile')}\n      </Heading>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Total cost: 1.5 CAKE')}\n      </Text>\n      <Link href={`${nftsBaseUrl}/profile`}>\n        <Button mb=\"24px\" scale=\"sm\" variant=\"secondary\">\n          {t('Back to profile')}\n        </Button>\n      </Link>\n      <Breadcrumbs>\n        {steps.map((translationKey, index) => {\n          return (\n            <Text key={translationKey} color={index <= currentStep ? 'text' : 'textDisabled'}>\n              {t(translationKey)}\n            </Text>\n          )\n        })}\n      </Breadcrumbs>\n    </Wrapper>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\n\nconst WalletNotConnected = () => {\n  const { t } = useTranslation()\n\n  return (\n    <div>\n      <Heading scale=\"xl\" mb=\"8px\">\n        {t('Oops!')}\n      </Heading>\n      <Text as=\"p\" mb=\"16px\">\n        {t('Please connect your wallet to continue')}\n      </Text>\n      <ConnectWalletButton />\n    </div>\n  )\n}\n\nexport default WalletNotConnected\n","import React from 'react'\nimport { ArrowForwardIcon, Button, ButtonProps } from '@pancakeswap/uikit'\n\nconst NextStepButton: React.FC<ButtonProps> = (props) => {\n  return <Button endIcon={<ArrowForwardIcon color=\"currentColor\" />} {...props} />\n}\n\nexport default NextStepButton\n","import { useContext } from 'react'\nimport { ProfileCreationContext } from './ProfileCreationProvider'\n\nconst useProfileCreation = () => {\n  return useContext(ProfileCreationContext)\n}\n\nexport default useProfileCreation\n","import React, { useState, useEffect } from 'react'\nimport { formatUnits } from '@ethersproject/units'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useToast from 'hooks/useToast'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiSingleTokenData } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_NFT_BUNNY_IDS } from './config'\n\ninterface MintNftData extends ApiSingleTokenData {\n  bunnyId?: string\n}\n\nconst Mint: React.FC = () => {\n  const [selectedBunnyId, setSelectedBunnyId] = useState<string>('')\n  const [starterNfts, setStarterNfts] = useState<MintNftData[]>([])\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const collections = useGetCollections()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(MINT_COST)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  useEffect(() => {\n    const getStarterNfts = async () => {\n      const { data: allPbTokens } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const nfts = STARTER_NFT_BUNNY_IDS.map((bunnyId) => {\n        if (allPbTokens && allPbTokens[bunnyId]) {\n          return { ...allPbTokens[bunnyId], bunnyId }\n        }\n        return undefined\n      })\n      setStarterNfts(nfts)\n    }\n    if (starterNfts.length === 0) {\n      getStarterNfts()\n    }\n  }, [starterNfts])\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.allowance(account, bunnyFactoryContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [bunnyFactoryContract.address, allowance.toString()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(bunnyFactoryContract, 'mintNFT', [selectedBunnyId])\n      },\n      onApproveSuccess: () => {\n        toastSuccess(t('Enabled'), t(\"Press 'confirm' to mint this NFT\"))\n      },\n      onSuccess: () => {\n        toastSuccess(t('Success'), t('You have minted your starter NFT'))\n        dispatch(fetchUserNfts({ account, collections }))\n        actions.nextStep()\n      },\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% CAKE', { num: formatUnits(MINT_COST) })}\n          </Text>\n          {starterNfts.map((nft) => {\n            const handleChange = (value: string) => setSelectedBunnyId(value)\n\n            return (\n              <SelectionCard\n                key={nft?.name}\n                name=\"mintStarter\"\n                value={nft?.bunnyId}\n                image={nft?.image.thumbnail}\n                isChecked={selectedBunnyId === nft?.bunnyId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft?.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% CAKE is required', { num: formatUnits(MINT_COST) })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={selectedBunnyId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n","import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const { library } = useWeb3React()\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  useFetchUserNfts()\n\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleApprove = async () => {\n    const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n    const tx = await callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Enabled'), t('Please progress to the next step.'))\n      setIsApproving(false)\n      setIsApproved(true)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 2 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Pancake Collectibles can be used.')}\n            <Link to={`${nftsBaseUrl}/collections`} style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {nfts\n              .filter((walletNft) => walletNft.location === NftLocation.WALLET)\n              .map((walletNft) => {\n                return (\n                  <SelectionCard\n                    name=\"profilePicture\"\n                    key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\n                    value={walletNft.tokenId}\n                    image={walletNft.image.thumbnail}\n                    isChecked={walletNft.tokenId === selectedNft.tokenId}\n                    onChange={(value: string) => actions.setSelectedNft(value, walletNft.collectionAddress)}\n                  >\n                    <Text bold>{walletNft.name}</Text>\n                  </SelectionCard>\n                )\n              })}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            id=\"approveStarterCollectible\"\n          >\n            {t('Enable')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n","import React, { useMemo } from 'react'\nimport { Card, CardBody, CommunityIcon, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport shuffle from 'lodash/shuffle'\nimport { useTeams } from 'state/teams/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\n\nconst Team: React.FC = () => {\n  const { teamId: currentTeamId, actions } = useProfileCreation()\n  const { t } = useTranslation()\n  const { teams } = useTeams()\n  const handleTeamSelection = (value: string) => actions.setTeamId(parseInt(value, 10))\n  const teamValues = useMemo(() => shuffle(Object.values(teams)), [teams])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 3 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Join a Team')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('It won’t be possible to undo the choice you make for the foreseeable future!')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Join a Team')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'There’s currently no big difference between teams, and no benefit of joining one team over another for now. So pick whichever one you like!',\n            )}\n          </Text>\n          {teamValues &&\n            teamValues.map((team) => {\n              return (\n                <SelectionCard\n                  key={team.name}\n                  name=\"teams-selection\"\n                  value={team.id}\n                  isChecked={currentTeamId === team.id}\n                  image={`/images/teams/${team.images.md}`}\n                  onChange={handleTeamSelection}\n                  disabled={!team.isJoinable}\n                >\n                  <Text bold>{team.name}</Text>\n                  <Flex>\n                    <CommunityIcon mr=\"8px\" />\n                    <Text>{team.users.toLocaleString()}</Text>\n                  </Flex>\n                </SelectionCard>\n              )\n            })}\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={currentTeamId === null}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Team\n","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import React, { ChangeEvent, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from '@pancakeswap/uikit'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWeb3React } from '@web3-react/core'\nimport { formatUnits } from '@ethersproject/units'\nimport { API_PROFILE } from 'config/constants/endpoints'\nimport useToast from 'hooks/useToast'\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { signMessage } from 'utils/web3React'\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\nimport { useTranslation } from 'contexts/Localization'\nimport debounce from 'lodash/debounce'\nimport ConfirmProfileCreationModal from './ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n  const { library } = useWeb3Provider()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(REGISTER_COST)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      selectedNft={selectedNft}\n      account={account}\n      teamId={teamId}\n      minimumCakeRequired={minimumCakeRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const checkUsernameValidity = debounce(async (value: string) => {\n    try {\n      setIsLoading(true)\n      const res = await fetch(`${API_PROFILE}/api/users/valid/${value}`)\n\n      if (res.ok) {\n        setIsValid(true)\n        setMessage('')\n      } else {\n        const data = await res.json()\n        setIsValid(false)\n        setMessage(data?.error?.message)\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }, 200)\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n    checkUsernameValidity(value)\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n\n      const signature = await signMessage(library, account, userName)\n      const response = await fetch(`${API_PROFILE}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n        }),\n      })\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(t('Error'), data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\n\n  // Perform an initial check to see if the wallet has already created a username\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${API_PROFILE}/api/users/${account}`)\n        const data = await response.json()\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\n\n          actions.setUserName(data.username)\n          setExistingUserState(ExistingUserState.CREATED)\n          setIsValid(true)\n        } else {\n          setExistingUserState(ExistingUserState.NEW)\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Unable to verify username'))\n      }\n    }\n\n    if (account) {\n      fetchUser()\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 4 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={t('Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\n            {t(\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\n              </div>\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {t('Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button\n        onClick={onPresentConfirmProfileCreation}\n        disabled={!isValid || !isUserCreated}\n        id=\"completeProfileCreation\"\n      >\n        {t('Complete Profile')}\n      </Button>\n      {!hasMinimumCakeRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {t('A minimum of %num% CAKE is required', { num: formatUnits(REGISTER_COST) })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n","import React from 'react'\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { formatUnits } from '@ethersproject/units'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useProfile } from 'hooks/useContract'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport { REGISTER_COST } from './config'\nimport { State } from './contexts/types'\n\ninterface Props {\n  userName: string\n  selectedNft: State['selectedNft']\n  account: string\n  teamId: number\n  minimumCakeRequired: ethers.BigNumber\n  allowance: ethers.BigNumber\n  onDismiss?: () => void\n}\n\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\n  account,\n  teamId,\n  selectedNft,\n  minimumCakeRequired,\n  allowance,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const profileContract = useProfile()\n  const dispatch = useAppDispatch()\n  const { toastSuccess } = useToast()\n  const cakeContract = useCake()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.allowance(account, profileContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [profileContract.address, allowance.toJSON()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(profileContract, 'createProfile', [\n          teamId,\n          selectedNft.collectionAddress,\n          selectedNft.tokenId,\n        ])\n      },\n      onSuccess: async ({ receipt }) => {\n        await dispatch(fetchProfile(account))\n        onDismiss()\n        toastSuccess(t('Profile created!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      },\n    })\n\n  return (\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\n      </Text>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Text>{t('Cost')}</Text>\n        <Text>{t('%num% CAKE', { num: formatUnits(REGISTER_COST) })}</Text>\n      </Flex>\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n    </Modal>\n  )\n}\n\nexport default ConfirmProfileCreationModal\n","import React, { useContext } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport NoWalletConnected from './WalletNotConnected'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport Mint from './Mint'\nimport ProfilePicture from './ProfilePicture'\nimport TeamSelection from './TeamSelection'\nimport UserName from './UserName'\n\nconst Steps = () => {\n  const { t } = useTranslation()\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <NoWalletConnected />\n  }\n\n  if (!isInitialized) {\n    return <div>{t('Loading...')}</div>\n  }\n\n  if (currentStep === 0) {\n    return <Mint />\n  }\n\n  if (currentStep === 1) {\n    return <ProfilePicture />\n  }\n\n  if (currentStep === 2) {\n    return <TeamSelection />\n  }\n\n  if (currentStep === 3) {\n    return <UserName />\n  }\n\n  return null\n}\n\nexport default Steps\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Redirect } from 'react-router'\nimport Page from 'components/Layout/Page'\nimport { useProfile } from 'state/profile/hooks'\nimport PageLoader from 'components/Loader/PageLoader'\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useFetchCollections } from 'state/nftMarket/hooks'\nimport Header from './Header'\nimport ProfileCreationProvider from './contexts/ProfileCreationProvider'\nimport Steps from './Steps'\n\nconst ProfileCreation = () => {\n  const { account } = useWeb3React()\n  const { isInitialized, isLoading, hasProfile } = useProfile()\n\n  useFetchUserNfts()\n  useFetchCollections()\n\n  if (!isInitialized || isLoading) {\n    return <PageLoader />\n  }\n\n  if (account && hasProfile) {\n    return <Redirect to={`${nftsBaseUrl}/profile/${account.toLowerCase()}`} />\n  }\n\n  return (\n    <>\n      <ProfileCreationProvider>\n        <Page>\n          <Header />\n          <Steps />\n        </Page>\n      </ProfileCreationProvider>\n    </>\n  )\n}\n\nexport default ProfileCreation\n"],"sourceRoot":""}