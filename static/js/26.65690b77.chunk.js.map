{"version":3,"sources":["views/Nft/market/components/CollectibleCard/styles.tsx","../node_modules/lodash/sum.js","views/Nft/market/hooks/useGetLowestPrice.ts","../node_modules/lodash/_baseSum.js","components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/utils.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx"],"names":["BNBAmountLabel","amount","props","alignItems","width","mx","fontWeight","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","fontSize","color","MetaRow","title","children","justifyContent","maxWidth","ellipsis","StyledCollectibleCard","styled","Card","theme","mediaQueries","lg","LowestPriceMetaRow","lowestPrice","isFetching","t","useTranslation","height","baseSum","require","identity","module","exports","array","length","getBunnyIdFromNft","nft","bunnyId","attributes","find","attr","traitType","value","toString","useGetLowestPriceFromBunnyId","useState","setIsFetching","setLowestPrice","useEffect","a","getNftsMarketData","otherId","isTradable","response","tokenMarketData","parseFloat","currentAskPrice","fetchLowestPrice","useGetLowestPriceFromNft","isPancakeBunny","collectionAddress","toLowerCase","pancakeBunniesAddress","bunnyIdAttr","iteratee","result","index","current","CollapsibleCard","initialOpenState","isOpen","setIsOpen","p","as","variant","scale","onClick","StyledSortButton","button","colors","secondary","TableWrapper","div","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","name","src","mr","LowestPriceCell","PancakeBunniesTraits","tokenApiResponse","setTokenApiResponse","raritySort","setRaritySort","push","useHistory","getNftsFromCollectionApi","apiResponse","fetchTokens","totalMinted","sum","Object","values","attributesDistribution","sortedBunnieKeys","useMemo","keys","data","sort","bunnyIdA","bunnyIdB","bunnyCountA","bunnyCountB","sortBunniesByRarityBuilder","textAlign","type","currentValue","map","count","percentage","nftsBaseUrl","image","thumbnail","formatNumber","times","bunnyCnt","CollectionTraits","useGetCollectionDistribution","total","traitValues","reduce","accum","traitValue","rarity","sortType","capitalize","mb","prevRaritySort","orderBy","Traits","useParams","dispatch","useAppDispatch","collection","useGetCollection","fetchCollection","Header","Container","py"],"mappings":"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","file":"static/js/26.65690b77.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\nimport {\n  Card,\n  BinanceIcon,\n  Box,\n  BoxProps,\n  CameraIcon,\n  Flex,\n  FlexProps,\n  SellIcon,\n  Text,\n  WalletFilledIcon,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport styled from 'styled-components'\n\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\n    {children}\n  </Box>\n)\n\ninterface BNBAmountLabelProps extends FlexProps {\n  amount: number\n}\n\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\n  <Flex alignItems=\"center\" {...props}>\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\n    <Text fontWeight=\"600\">\n      {amount.toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 4,\n      })}\n    </Text>\n  </Flex>\n)\n\ninterface CostLabelProps extends FlexProps {\n  cost: number\n  bnbBusdPrice: Price\n}\n\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      {priceInUsd > 0 && (\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}</Text>\n      )}\n      <BNBAmountLabel amount={cost} />\n    </Flex>\n  )\n}\n\ninterface MetaRowProps extends FlexProps {\n  title: string\n}\n\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\n      {title}\n    </Text>\n    <Box>{children}</Box>\n  </Flex>\n)\n\nexport interface NftTagProps extends FlexProps {\n  icon?: ReactElement\n  color?: string\n}\n\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\n    {icon}\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\n      {children}\n    </Text>\n  </Flex>\n)\n\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\n      {t('Profile')}\n    </NftTag>\n  )\n}\n\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\n      {t('Wallet')}\n    </NftTag>\n  )\n}\n\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\n      {t('Selling')}\n    </NftTag>\n  )\n}\n\nexport const StyledCollectibleCard = styled(Card)`\n  border-radius: 8px;\n  max-width: 320px;\n  transition: opacity 200ms;\n\n  & > div {\n    border-radius: 8px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    &:hover {\n      cursor: pointer;\n      opacity: 0.6;\n    }\n  }\n`\ninterface LowestPriceMetaRowProps {\n  lowestPrice: number\n  isFetching: boolean\n  bnbBusdPrice: Price\n}\n\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\n  const { t } = useTranslation()\n\n  if (!isFetching && !lowestPrice) {\n    return null\n  }\n\n  return (\n    <MetaRow title={t('Lowest price')}>\n      {isFetching ? (\n        <Skeleton height=\"24px\" width=\"30px\" />\n      ) : (\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\n      )}\n    </MetaRow>\n  )\n}\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import { useEffect, useState } from 'react'\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\nexport interface LowestNftPrice {\n  isFetching: boolean\n  lowestPrice: number\n}\n\nconst getBunnyIdFromNft = (nft: NftToken): string => {\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\n  return bunnyId ? bunnyId.toString() : null\n}\n\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (bunnyId) {\n      fetchLowestPrice()\n    }\n  }, [bunnyId])\n\n  return { isFetching, lowestPrice }\n}\n\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData(\n          { otherId: bunnyIdAttr, isTradable: true },\n          1,\n          'currentAskPrice',\n          'asc',\n        )\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (isPancakeBunny && nft) {\n      fetchLowestPrice()\n    }\n  }, [isPancakeBunny, nft])\n\n  return { isFetching, lowestPrice }\n}\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import React, { useState } from 'react'\nimport {\n  CardProps,\n  CardHeader,\n  Card,\n  Flex,\n  Heading,\n  IconButton,\n  ChevronUpIcon,\n  ChevronDownIcon,\n} from '@pancakeswap/uikit'\n\ninterface CollapsibleCardProps extends CardProps {\n  initialOpenState?: boolean\n  title: string\n}\n\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\n  const [isOpen, setIsOpen] = useState(initialOpenState)\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  return (\n    <Card {...props}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\n          <Heading as=\"h3\">{title}</Heading>\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\n          </IconButton>\n        </Flex>\n      </CardHeader>\n      {isOpen && children}\n    </Card>\n  )\n}\n\nexport default CollapsibleCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const TableWrapper = styled.div`\n  -webkit-overflow-scrolling: touch;\n  min-width: 320px;\n  overflow-x: auto;\n`\n\nexport const NftImage = styled(Image)`\n  flex: none;\n  & > img {\n    border-radius: 8px;\n  }\n`\n\nexport const ClickableRow = styled.tr`\n  cursor: pointer;\n\n  &:hover {\n    td {\n      opacity: 0.65;\n    }\n  }\n`\n\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\n  <Flex alignItems=\"center\">\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\n    <Text>{name}</Text>\n  </Flex>\n)\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useHistory } from 'react-router'\nimport times from 'lodash/times'\nimport sum from 'lodash/sum'\nimport { formatNumber } from 'utils/formatBalance'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiResponseCollectionTokens } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\nimport { sortBunniesByRarityBuilder } from './utils'\nimport { nftsBaseUrl } from '../../constants'\nimport { SortType } from '../../types'\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\n\ninterface PancakeBunniesTraitsProps {\n  collectionAddress: string\n}\n\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\n\n  if (isFetching) {\n    return (\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\n        <Skeleton height=\"24px\" width=\"48px\" />\n      </Flex>\n    )\n  }\n\n  if (!lowestPrice) {\n    return null\n  }\n\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\n}\n\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\n  const [tokenApiResponse, setTokenApiResponse] = useState<ApiResponseCollectionTokens>(null)\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\n  const { t } = useTranslation()\n  const { push } = useHistory()\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\n      setTokenApiResponse(apiResponse)\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setTokenApiResponse])\n\n  const totalMinted = tokenApiResponse ? sum(Object.values(tokenApiResponse.attributesDistribution)) : 0\n\n  const sortedBunnieKeys = useMemo(() => {\n    if (!tokenApiResponse) return []\n\n    return Object.keys(tokenApiResponse.data).sort(sortBunniesByRarityBuilder({ raritySort, data: tokenApiResponse }))\n  }, [raritySort, tokenApiResponse])\n\n  const toggleRaritySort = () => {\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  return (\n    <>\n      {tokenApiResponse ? (\n        <CollapsibleCard title={t('Bunny Id')}>\n          <TableWrapper>\n            <Table>\n              <thead>\n                <tr>\n                  <Th textAlign=\"left\">{t('Name')}</Th>\n                  <Th>{t('Count')}</Th>\n                  <Th>\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                      <Flex alignItems=\"center\">\n                        {t('Rarity')}\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\n                      </Flex>\n                    </StyledSortButton>\n                  </Th>\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {sortedBunnieKeys.map((bunnyId) => {\n                  const nft = tokenApiResponse.data[bunnyId]\n                  if (!nft) {\n                    // Some bunnies don't exist on testnet\n                    return null\n                  }\n                  const count: number = tokenApiResponse.attributesDistribution[bunnyId] ?? 0\n                  const percentage = (count / totalMinted) * 100\n                  const handleClick = () => {\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${bunnyId}`)\n                  }\n\n                  return (\n                    <ClickableRow key={bunnyId} onClick={handleClick} title={t('Click to view NFT')}>\n                      <Td>\n                        <NftName thumbnailSrc={nft.image.thumbnail} name={nft.name} />\n                      </Td>\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\n                      <Td textAlign=\"right\" width=\"100px\">\n                        <LowestPriceCell bunnyId={bunnyId} />\n                      </Td>\n                    </ClickableRow>\n                  )\n                })}\n              </tbody>\n            </Table>\n          </TableWrapper>\n        </CollapsibleCard>\n      ) : (\n        <CollapsibleCard title={t('Loading...')}>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign=\"left\">{t('Name')}</Th>\n                <Th>{t('Count')}</Th>\n                <Th>{t('Rarity')}</Th>\n                <Th>{t('Lowest')}</Th>\n              </tr>\n            </thead>\n            <tbody>\n              {times(19).map((bunnyCnt) => (\n                <tr key={bunnyCnt}>\n                  <Td>\n                    <Flex alignItems=\"center\">\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\n                      <Skeleton width=\"100px\" />\n                    </Flex>\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                  <Td>\n                    <Skeleton />\n                  </Td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </CollapsibleCard>\n      )}\n    </>\n  )\n}\n\nexport default PancakeBunniesTraits\n","import { ApiResponseCollectionTokens } from 'state/nftMarket/types'\n\ntype sortBuilder = {\n  data: ApiResponseCollectionTokens\n  raritySort: string\n}\n\nexport const sortBunniesByRarityBuilder =\n  ({ raritySort, data }: sortBuilder) =>\n  (bunnyIdA, bunnyIdB) => {\n    const bunnyCountA = data.attributesDistribution[bunnyIdA] ?? 0\n    const bunnyCountB = data.attributesDistribution[bunnyIdB] ?? 0\n\n    return raritySort === 'asc' ? bunnyCountA - bunnyCountB : bunnyCountB - bunnyCountA\n  }\n","import React, { useState } from 'react'\nimport times from 'lodash/times'\nimport capitalize from 'lodash/capitalize'\nimport sum from 'lodash/sum'\nimport orderBy from 'lodash/orderBy'\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport CollapsibleCard from 'components/CollapsibleCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { SortType } from '../../types'\nimport { StyledSortButton, TableWrapper } from './styles'\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\n\ninterface CollectionTraitsProps {\n  collectionAddress: string\n}\n\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\n  const { t } = useTranslation()\n\n  if (isFetching) {\n    return (\n      <CollapsibleCard title={t('Loading...')}>\n        <Table>\n          <thead>\n            <tr>\n              <Th textAlign=\"left\">{t('Name')}</Th>\n              <Th width=\"100px\">{t('Count')}</Th>\n              <Th width=\"160px\">{t('Rarity')}</Th>\n            </tr>\n          </thead>\n          <tbody>\n            {times(19).map((bunnyCnt) => (\n              <tr key={bunnyCnt}>\n                <Td>\n                  <Skeleton width=\"100px\" />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n                <Td>\n                  <Skeleton />\n                </Td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </CollapsibleCard>\n    )\n  }\n\n  return (\n    <>\n      {data &&\n        Object.keys(data).map((traitType, index) => {\n          const total = sum(Object.values(data[traitType]))\n\n          // Parse the distribution values into an array to make it easier to sort\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\n            (accum, traitValue) => {\n              const count = data[traitType][traitValue]\n              const rarity = (count / total) * 100\n\n              return [...accum, { value: traitValue, count, rarity }]\n            },\n            [],\n          )\n          const sortType = raritySort[traitType] || 'desc'\n\n          const toggleRaritySort = () => {\n            setRaritySort((prevRaritySort) => {\n              if (!prevRaritySort[traitType]) {\n                return {\n                  ...prevRaritySort,\n                  [traitType]: 'asc',\n                }\n              }\n\n              return {\n                ...prevRaritySort,\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\n              }\n            })\n          }\n\n          return (\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\n              <TableWrapper>\n                <Table>\n                  <thead>\n                    <tr>\n                      <Th textAlign=\"left\">{t('Name')}</Th>\n                      <Th width=\"100px\">{t('Count')}</Th>\n                      <Th width=\"160px\">\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\n                          <Flex alignItems=\"center\">\n                            {t('Rarity')}\n                            {raritySort[traitType] === 'asc' ? (\n                              <ArrowUpIcon color=\"secondary\" />\n                            ) : (\n                              <ArrowDownIcon color=\"secondary\" />\n                            )}\n                          </Flex>\n                        </StyledSortButton>\n                      </Th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\n                      return (\n                        <tr key={value}>\n                          <Td>{capitalize(value)}</Td>\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </TableWrapper>\n            </CollapsibleCard>\n          )\n        })}\n    </>\n  )\n}\n\nexport default CollectionTraits\n","import React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport Container from 'components/Layout/Container'\nimport { useAppDispatch } from 'state'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport Header from '../Header'\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\nimport { pancakeBunniesAddress } from '../../constants'\nimport CollectionTraits from './CollectionTraits'\n\nconst Traits = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n\n  useEffect(() => {\n    if (collectionAddress) {\n      dispatch(fetchCollection(collectionAddress))\n    }\n  }, [collectionAddress, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Container py=\"40px\">\n        {collectionAddress === pancakeBunniesAddress ? (\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\n        ) : (\n          <CollectionTraits collectionAddress={collectionAddress} />\n        )}\n      </Container>\n    </>\n  )\n}\n\nexport default Traits\n"],"sourceRoot":""}