{"version":3,"sources":["../node_modules/lodash/times.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/_castFunction.js","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/StatBox.tsx","views/Teams/components/IconStatBox.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/Profile/utils/sortUserActivity.tsx","views/Nft/market/Profile/components/EditProfileAvatar.tsx","views/Nft/market/Profile/components/ProfileHeader.tsx","views/Nft/market/Profile/components/TabMenu.tsx","views/Nft/market/Profile/components/Achievements/AchievementAvatar.tsx","views/Nft/market/Profile/components/Achievements/AchievementTitle.tsx","views/Nft/market/Profile/components/Achievements/AchievementDescription.tsx","views/Nft/market/Profile/components/Achievements/AchievementCard.tsx","views/Nft/market/Profile/components/Achievements/AchievementsList.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/PointsLabel.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx","views/Nft/market/Profile/components/Achievements/ClaimPointsCallout.tsx","views/Nft/market/Profile/components/Achievements/index.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityEventText.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityPrice.tsx","views/Nft/market/Profile/components/ActivityHistory/MobileModal.tsx","views/Nft/market/Profile/components/ActivityHistory/ActivityRow.tsx","views/Nft/market/Profile/components/ActivityHistory/TableLoader.tsx","views/Nft/market/Profile/components/NoNftsImage.tsx","views/Nft/market/Profile/components/ActivityHistory/index.tsx","views/Nft/market/Profile/components/SubMenu.tsx","views/Nft/market/Profile/components/UserNfts.tsx","views/Nft/market/Profile/ConnectedProfile.tsx","state/achievements/hooks.ts","views/Nft/market/Profile/hooks/useNftsForAddress.tsx","views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx","views/Nft/market/Profile/UnconnectedProfile.tsx","views/Nft/market/Profile/index.tsx"],"names":["baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","Math","min","module","exports","n","iteratee","index","length","result","toFinite","value","remainder","identity","GridPlaceholderItem","props","height","mb","width","GridPlaceholder","numItems","gridGap","gridTemplateColumns","times","map","itemKey","MarketPageHeader","background","useTheme","theme","isDark","AvatarImage","styled","div","attrs","alt","src","borderColor","StatBoxItem","title","stat","fontSize","color","textAlign","mx","fontWeight","StatBox","Flex","colors","invertedContrast","cardBorder","radii","card","SecondaryCard","Text","tertiary","defaultProps","p","IconStatBox","Icon","icon","subtitle","isDisabled","alignItems","mr","as","scale","textTransform","bold","MarketPageTitle","description","children","BaseSubMenu","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","position","pb","BannerImage","bottom","left","MarketEvent","EditOverlay","StyledEditProfileAvatar","EditProfileAvatar","useModal","EditProfileModal","onEditProfileModal","onClick","StyledIconButton","IconButton","ProfileHeader","accountPath","profile","achievements","nftCollected","isAchievementsLoading","isNftLoading","isProfileLoading","t","useTranslation","account","useWeb3React","isConnectedAccount","toLowerCase","numNftCollected","formatNumber","numPoints","points","numAchievements","avatarImage","nft","image","thumbnail","imagePath","teamId","getBannerImage","display","target","href","getBscScanLink","username","truncateHash","external","mt","to","Tab","button","$active","secondary","textSubtle","TabMenu","accountAddress","useParams","pathname","useLocation","useState","includes","achievementsActive","setIsAchievementsActive","useEffect","RouterLink","nftsBaseUrl","NoBadgePlaceholder","BunnyPlaceholderIcon","StyledAchievementAvatar","img","AchievementAvatar","badge","AchievementTitle","key","data","Description","AchievementDescription","Details","AchievementCard","achievement","toLocaleString","Grid","AchievementsList","isLoading","isMobile","useMatchBreakpoints","id","justifyContent","style","PointsLabel","localePoints","num","ActionColumn","StyledAchievementRow","Body","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","useToast","toastError","toastSuccess","callWithGasPrice","useCallWithGasPrice","handleCollectPoints","a","address","tx","wait","receipt","status","Toast","txHash","transactionHash","px","endIcon","spin","disabled","variant","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","dispatch","useAppDispatch","useProfile","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","filter","prevClaimableAchievement","isActive","totalPointsToCollect","sumBy","Achievements","PrizeIcon","sortUserActivity","userActivities","askOrderHistory","buyTradeHistory","sellTradeHistory","transformTransactions","transactions","transaction","userSeller","seller","marketEvent","SELL","BUY","timestamp","price","askPrice","otherParty","buyer","allActivity","askOrder","orderType","AskOrderType","CANCEL","MODIFY","NEW","getAskOrderEvent","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ActivityEventText","events","text","ActivityPrice","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","justifySelf","maxWidth","undefined","minimumFractionDigits","maximumFractionDigits","RoundedImage","Image","default","MobileModal","activity","localeTimestamp","onDismiss","chainId","useActiveWeb3React","priceAsFloat","parseFloat","headerBackground","gradients","cardHeader","collectionName","name","pt","Link","ActivityRow","isXs","isSm","timestampAsMs","Date","year","month","day","hour","minute","onPresentMobileModal","ProfileCell","GridItem","LoadingRow","TableLoader","NoNftsImage","ActivityHistory","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","sortedUserActivities","setSortedUserActivities","setIsLoading","userActivity","useUserNfts","useBNBBusdPrice","initializationState","UserNftInitializationState","INITIALIZED","isAddress","toLocaleLowerCase","fetchAddressActivity","getUserActivity","addressActivity","console","error","fetchUserActivity","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","tokenId","collectionAddress","collection","getNftsFromDifferentCollectionsApi","nfts","max","ceil","getMaxPages","slice","getActivitiesSlice","nftMeta","find","metaNft","borderTop","page","SubMenuComponent","ItemsConfig","label","items","activeItem","UserNfts","userNftsInitializationState","location","clickedProfileNft","setClickedProfileNft","clickedSellNft","setClickedSellNft","ProfileNftModal","onPresentProfileNftModal","SellModal","nftToSell","onPresentSellModal","marketData","isUserNft","NftLocation","PROFILE","WALLET","FORSALE","handleCollectibleClick","currentAskPrice","isTradable","nftLocation","TabMenuWrapper","Box","ConnectedProfile","useSelector","state","achievementFetchStatus","userNfts","fetchAchievements","useFetchAchievements","useFetchUserNfts","AchievementFetchStatus","FETCHED","Page","minHeight","path","SubMenu","exact","useNftsForAddress","isProfileFetching","combinedNfts","setCombinedNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","getNfts","getCompleteAccountNftData","completeNftData","isEmpty","UnconnectedProfile","useProfileForAddress","profileHookState","isFetching","useAchievementsForAddress","isAchievementFetching","UnconnectedProfileNfts","NftProfile","isConnectedProfile"],"mappings":"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","file":"static/js/13.10a574fc.chunk.js","sourcesContent":["var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","import React from 'react'\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"258px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import React, { ElementType, ReactNode } from 'react'\nimport { Flex, Heading, Text, TextProps } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst SecondaryCard = styled(Text)`\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px;\n`\n\nSecondaryCard.defaultProps = {\n  p: '24px',\n}\n\ninterface IconStatBoxProps extends TextProps {\n  icon: ElementType\n  title: ReactNode\n  subtitle: ReactNode\n  isDisabled?: boolean\n}\n\nconst IconStatBox: React.FC<IconStatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\n  return (\n    <SecondaryCard {...props}>\n      <Flex alignItems=\"start\">\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\n        <div>\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\n            {title}\n          </Heading>\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\n            {subtitle}\n          </Text>\n        </div>\n      </Flex>\n    </SecondaryCard>\n  )\n}\n\nexport default IconStatBox\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import { ethers } from 'ethers'\nimport { AskOrder, AskOrderType, TokenMarketData, Transaction } from 'state/nftMarket/types'\n\nexport enum MarketEvent {\n  NEW = 'NEW',\n  CANCEL = 'CANCEL',\n  MODIFY = 'MODIFY',\n  BUY = 'BUY',\n  SELL = 'SELL',\n}\n\nexport interface Activity {\n  marketEvent: MarketEvent\n  timestamp: string\n  tx: string\n  nft?: TokenMarketData\n  price?: string\n  otherParty?: string\n}\n\nexport const sortUserActivity = (\n  account: string,\n  userActivities: { askOrderHistory: AskOrder[]; buyTradeHistory: Transaction[]; sellTradeHistory: Transaction[] },\n): Activity[] => {\n  const { askOrderHistory, buyTradeHistory, sellTradeHistory } = userActivities\n\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n    switch (orderType) {\n      case AskOrderType.CANCEL:\n        return MarketEvent.CANCEL\n      case AskOrderType.MODIFY:\n        return MarketEvent.MODIFY\n      case AskOrderType.NEW:\n        return MarketEvent.NEW\n      default:\n        return MarketEvent.MODIFY\n    }\n  }\n\n  const transformTransactions = (transactions: Transaction[]): Activity[] => {\n    const transformedTransactions = transactions.map((transaction) => {\n      const userSeller = transaction.seller.id === account.toLowerCase()\n      const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n      const { timestamp, nft } = transaction\n      const price = transaction.askPrice\n      const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n      const tx = transaction.id\n      return { marketEvent, price, otherParty, timestamp, nft, tx }\n    })\n\n    return transformedTransactions\n  }\n\n  const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n    const transformedAskOrders = askOrders.map((askOrder) => {\n      const marketEvent = getAskOrderEvent(askOrder.orderType)\n      const { timestamp, nft } = askOrder\n      const price = askOrder.askPrice\n      const tx = askOrder.id\n      return { marketEvent, price, timestamp, nft, tx }\n    })\n\n    return transformedAskOrders\n  }\n\n  const allActivity = [\n    ...transformAskOrders(askOrderHistory),\n    ...transformTransactions(buyTradeHistory),\n    ...transformTransactions(sellTradeHistory),\n  ]\n  if (allActivity.length > 0) {\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n      return timestamp2.sub(timestamp1).toNumber()\n    })\n\n    return sortedByMostRecent\n  }\n  return []\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useModal } from '@pancakeswap/uikit'\nimport AvatarImage from 'views/Nft/market/components/BannerHeader/AvatarImage'\nimport EditProfileModal from './EditProfileModal'\n\nconst EditOverlay = styled.div`\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\n  border-radius: 50%;\n  left: 0;\n  height: 100%;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  transition: opacity 300ms;\n  width: 100%;\n  z-index: 1;\n`\n\nconst StyledEditProfileAvatar = styled.div`\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n\n    ${EditOverlay} {\n      opacity: 1;\n    }\n  }\n`\n\nconst EditProfileAvatar: React.FC<{ src: string; alt?: string }> = ({ src, alt }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\n      <AvatarImage src={src} alt={alt} />\n      <EditOverlay />\n    </StyledEditProfileAvatar>\n  )\n}\n\nexport default EditProfileAvatar\n","import React from 'react'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport truncateHash from 'utils/truncateHash'\nimport { Achievement, Profile } from 'state/types'\nimport { useWeb3React } from '@web3-react/core'\nimport EditProfileAvatar from './EditProfileAvatar'\nimport BannerHeader from '../../components/BannerHeader'\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\nimport MarketPageTitle from '../../components/MarketPageTitle'\nimport EditProfileModal from './EditProfileModal'\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\n\ninterface HeaderProps {\n  accountPath: string\n  profile: Profile\n  achievements: Achievement[]\n  nftCollected: number\n  isAchievementsLoading: boolean\n  isNftLoading: boolean\n  isProfileLoading: boolean\n}\n\nconst StyledIconButton = styled(IconButton)`\n  width: fit-content;\n`\n\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\nconst ProfileHeader: React.FC<HeaderProps> = ({\n  accountPath,\n  profile,\n  achievements,\n  nftCollected,\n  isAchievementsLoading,\n  isNftLoading,\n  isProfileLoading,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\n  const numNftCollected = !isNftLoading ? (nftCollected ? formatNumber(nftCollected, 0, 0) : '-') : null\n  const numPoints = !isProfileLoading ? (profile?.points ? formatNumber(profile.points, 0, 0) : '-') : null\n  const numAchievements = !isAchievementsLoading\n    ? achievements?.length\n      ? formatNumber(achievements.length, 0, 0)\n      : '-'\n    : null\n\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\n\n  const getBannerImage = () => {\n    const imagePath = '/images/teams'\n    if (profile) {\n      switch (profile.teamId) {\n        case 1:\n          return `${imagePath}/storm-banner.png`\n        case 2:\n          return `${imagePath}/flippers-banner.png`\n        case 3:\n          return `${imagePath}/cakers-banner.png`\n        default:\n          break\n      }\n    }\n    return `${imagePath}/no-team-banner.png`\n  }\n\n  const getAvatar = () => {\n    const getIconButtons = () => {\n      return (\n        // TODO: Share functionality once user profiles routed by ID\n        <Flex display=\"inline-flex\">\n          {accountPath && (\n            <StyledIconButton\n              target=\"_blank\"\n              as=\"a\"\n              href={getBscScanLink(accountPath, 'address')}\n              alt={t('View BscScan for user address')}\n            >\n              <BscScanIcon width=\"20px\" color=\"primary\" />\n            </StyledIconButton>\n          )}\n        </Flex>\n      )\n    }\n\n    const getImage = () => {\n      return (\n        <>\n          {profile && accountPath && isConnectedAccount ? (\n            <EditProfileAvatar src={avatarImage} alt={t('User profile picture')} />\n          ) : (\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\n          )}\n        </>\n      )\n    }\n    return (\n      <>\n        {getImage()}\n        {getIconButtons()}\n      </>\n    )\n  }\n\n  const getTitle = () => {\n    if (profile?.username) {\n      return `@${profile.username}`\n    }\n\n    if (accountPath) {\n      return truncateHash(accountPath, 5, 3)\n    }\n\n    return null\n  }\n\n  const renderDescription = () => {\n    const getActivateButton = () => {\n      if (!profile) {\n        return (\n          <ReactRouterLink to=\"/create-profile\">\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\n          </ReactRouterLink>\n        )\n      }\n      return (\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\n          {t('Reactivate Profile')}\n        </Button>\n      )\n    }\n\n    return (\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\n        {accountPath && profile?.username && (\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\n            {truncateHash(accountPath)}\n          </Link>\n        )}\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\n      </Flex>\n    )\n  }\n\n  return (\n    <>\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\n        <StatBox>\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\n          <StatBoxItem title={t('Points')} stat={numPoints} />\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\n        </StatBox>\n      </MarketPageTitle>\n    </>\n  )\n}\n\nexport default ProfileHeader\n","import React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Link as RouterLink, useLocation, useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst Tab = styled.button<{ $active: boolean }>`\n  display: inline-flex;\n  justify-content: center;\n  cursor: pointer;\n  color: ${({ theme, $active }) => ($active ? theme.colors.secondary : theme.colors.textSubtle)};\n  border-width: ${({ $active }) => ($active ? '1px 1px 0 1px' : '0')};\n  border-style: solid solid none solid;\n  border-color: ${({ theme }) =>\n    `${theme.colors.cardBorder} ${theme.colors.cardBorder} transparent ${theme.colors.cardBorder}`};\n  outline: 0;\n  padding: 12px 16px;\n  border-radius: 16px 16px 0 0;\n  font-size: 16px;\n  font-weight: ${({ $active }) => ($active ? '600' : '400')};\n  background-color: ${({ theme, $active }) => ($active ? theme.colors.background : 'transparent')};\n  transition: background-color 0.3s ease-out;\n`\n\nconst TabMenu = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n  const [achievementsActive, setIsAchievementsActive] = useState(pathname.includes('achievements'))\n\n  useEffect(() => {\n    setIsAchievementsActive(pathname.includes('achievements'))\n  }, [pathname])\n\n  return (\n    <Flex>\n      <Tab\n        onClick={() => setIsAchievementsActive(false)}\n        $active={!achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}`}\n      >\n        NFTs\n      </Tab>\n      <Tab\n        onClick={() => setIsAchievementsActive(true)}\n        $active={achievementsActive}\n        as={RouterLink}\n        to={`${nftsBaseUrl}/profile/${accountAddress}/achievements`}\n      >\n        {t('Achievements')}\n      </Tab>\n    </Flex>\n  )\n}\n\nexport default TabMenu\n","import React, { ImgHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\n\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\n  badge?: string\n}\n\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst StyledAchievementAvatar = styled.img`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\n  if (!badge) {\n    return <NoBadgePlaceholder />\n  }\n\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\n}\n\nexport default AchievementAvatar\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementTitleType } from 'config/constants/types'\n\ninterface AchievementTitleProps extends TextProps {\n  title: AchievementTitleType\n}\n\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\n  const { t } = useTranslation()\n\n  if (typeof title === 'string') {\n    return (\n      <Text bold {...props}>\n        {title}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = title\n\n  return (\n    <Text bold {...props}>\n      {t(key, data)}\n    </Text>\n  )\n}\n\nexport default AchievementTitle\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementDescriptionType } from 'config/constants/types'\nimport styled from 'styled-components'\n\ninterface AchievementDescriptionProps extends TextProps {\n  description?: AchievementDescriptionType\n}\n\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\n  const { t } = useTranslation()\n\n  if (!description) {\n    return null\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\n        {description}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = description\n\n  return (\n    <Description color=\"textSubtle\" {...props}>\n      {t(key, data)}\n    </Description>\n  )\n}\n\nexport default AchievementDescription\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport AchievementAvatar from './AchievementAvatar'\nimport AchievementTitle from './AchievementTitle'\nimport AchievementDescription from './AchievementDescription'\n\ninterface AchievementCardProps {\n  achievement: Achievement\n}\n\nconst Details = styled(Flex)`\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  return (\n    <Flex>\n      <AchievementAvatar badge={achievement.badge} />\n      <Details>\n        <AchievementTitle title={achievement.title} />\n        <AchievementDescription description={achievement.description} />\n      </Details>\n      <Flex alignItems=\"center\">\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AchievementCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Achievement } from 'state/types'\nimport AchievementCard from './AchievementCard'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst AchievementsList: React.FC<{ achievements: Achievement[]; isLoading: boolean }> = ({\n  achievements,\n  isLoading,\n}) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  if (isLoading) {\n    if (isMobile) {\n      return <Skeleton width=\"100%\" height=\"64px\" />\n    }\n    return <Skeleton width=\"540px\" height=\"64px\" />\n  }\n\n  return (\n    <>\n      <Grid>\n        {achievements.map((achievement) => (\n          <AchievementCard key={achievement.id} achievement={achievement} />\n        ))}\n      </Grid>\n      {achievements.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n            {t('No achievements yet!')}\n          </Heading>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default AchievementsList\n","import React from 'react'\nimport { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PointsLabelProps extends FlexProps {\n  points: number\n}\n\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\n  const { t } = useTranslation()\n  const localePoints = points.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\n    </Flex>\n  )\n}\n\nexport default PointsLabel\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\nimport PointsLabel from './PointsLabel'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleCollectPoints = async () => {\n    try {\n      const tx = await callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\n      setIsCollecting(true)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        onCollectSuccess(achievement)\n        toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      } else {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsCollecting(false)\n    }\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","import React from 'react'\nimport { Card, CardBody, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport IconStatBox from 'views/Teams/components/IconStatBox'\nimport { Achievement } from 'state/types'\nimport AchievementsList from './AchievementsList'\nimport ClaimPointsCallout from './ClaimPointsCallout'\n\nconst Achievements: React.FC<{ achievements: Achievement[]; isLoading: boolean; points?: number }> = ({\n  achievements,\n  isLoading,\n  points = 0,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Card>\n      <CardBody>\n        <IconStatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\n        <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\n          {t('Achievements')}\n        </Heading>\n        <ClaimPointsCallout />\n        <AchievementsList achievements={achievements} isLoading={isLoading} />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Achievements\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { MarketEvent } from '../../utils/sortUserActivity'\n\ninterface ActivityEventTextProps extends TextProps {\n  marketEvent: MarketEvent\n}\n\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\n  const { t } = useTranslation()\n\n  const events = {\n    [MarketEvent.NEW]: {\n      text: t('Listed'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.CANCEL]: {\n      text: t('Delisted'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.MODIFY]: {\n      text: t('Modified'),\n      color: 'textSubtle',\n    },\n    [MarketEvent.BUY]: {\n      text: t('Bought'),\n      color: 'success',\n    },\n    [MarketEvent.SELL]: {\n      text: t('Sold'),\n      color: 'failure',\n    },\n  }\n\n  return (\n    <Text {...props} color={events[marketEvent].color}>\n      {events[marketEvent].text}\n    </Text>\n  )\n}\n\nexport default ActivityEventText\n","import React from 'react'\nimport { Flex, BinanceIcon, Text } from '@pancakeswap/uikit'\nimport { multiplyPriceByAmount } from 'utils/prices'\n\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n      {price ? (\n        <>\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n            <Text maxWidth=\"80px\" bold>\n              {price.toLocaleString(undefined, {\n                minimumFractionDigits: 0,\n                maximumFractionDigits: 5,\n              })}\n            </Text>\n          </Flex>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~$${priceInUsd.toLocaleString(undefined, {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2,\n            })})`}\n          </Text>\n        </>\n      ) : (\n        '-'\n      )}\n    </Flex>\n  )\n}\n\nexport default ActivityPrice\n","import React from 'react'\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\nimport { Price } from '@pancakeswap/sdk'\nimport useTheme from 'hooks/useTheme'\nimport styled from 'styled-components'\nimport { NftToken } from 'state/nftMarket/types'\nimport { LightGreyCard } from 'components/Card'\nimport { useTranslation } from 'contexts/Localization'\nimport truncateHash from 'utils/truncateHash'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { Activity } from '../../utils/sortUserActivity'\nimport ActivityEventText from './ActivityEventText'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface MobileModalProps extends InjectedModalProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n  localeTimestamp: string\n}\n\nconst MobileModal: React.FC<MobileModalProps> = ({ nft, activity, bnbBusdPrice, localeTimestamp, onDismiss }) => {\n  const { chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const priceAsFloat = parseFloat(activity.price)\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\n\n  return (\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\n        <Flex alignItems=\"center\" mb=\"16px\">\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\">\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n              {nft.collectionName}\n            </Text>\n            <Text bold>{nft.name}</Text>\n          </Flex>\n        </Flex>\n        <LightGreyCard p=\"16px\">\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\n            {priceAsFloat ? (\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\n                <Text mr=\"4px\" bold>\n                  {priceAsFloat}\n                </Text>\n                <Text color=\"textSubtle\">\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\n                    minimumFractionDigits: 2,\n                    maximumFractionDigits: 2,\n                  })}`}\n                </Text>\n              </Flex>\n            ) : (\n              '-'\n            )}\n          </Flex>\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('From/To')}\n            </Text>\n            <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\n          </Flex>\n          <Flex justifyContent=\"space-between\">\n            <Text fontSize=\"14px\" color=\"textSubtle\">\n              {t('Date')}\n            </Text>\n            <Text>{localeTimestamp}</Text>\n          </Flex>\n        </LightGreyCard>\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            {t('View on BscScan')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default MobileModal\n","import React from 'react'\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Price } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport { getBscScanLink } from 'utils'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport { Activity } from '../../utils/sortUserActivity'\nimport ActivityEventText from './ActivityEventText'\nimport ActivityPrice from './ActivityPrice'\nimport MobileModal from './MobileModal'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\ninterface ActivityRowProps {\n  activity: Activity\n  nft: NftToken\n  bnbBusdPrice: Price\n}\n\nconst ActivityRow: React.FC<ActivityRowProps> = ({ activity, bnbBusdPrice, nft }) => {\n  const { chainId } = useActiveWeb3React()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const priceAsFloat = parseFloat(activity.price)\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  })\n  const [onPresentMobileModal] = useModal(\n    <MobileModal nft={nft} activity={activity} localeTimestamp={localeTimestamp} bnbBusdPrice={bnbBusdPrice} />,\n  )\n\n  return (\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\n      <Td>\n        <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\n          <RoundedImage\n            src={nft?.image.thumbnail}\n            alt={nft?.name}\n            width={64}\n            height={64}\n            mr={[0, null, '16px']}\n            mb={['8px', null, 0]}\n          />\n          <Flex flexDirection=\"column\">\n            <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\n              {nft?.collectionName}\n            </Text>\n            <Text textAlign={['center', null, 'left']} bold>\n              {nft?.name}\n            </Text>\n          </Flex>\n        </Flex>\n      </Td>\n      <Td>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <ActivityEventText marketEvent={activity.marketEvent} />\n        </Flex>\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\n          </Td>\n          <Td>\n            <Flex justifyContent=\"flex-end\" alignItems=\"center\">\n              {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\n            </Flex>\n          </Td>\n        </>\n      )}\n      <Td>\n        <Flex justifyContent=\"center\">\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\n            {localeTimestamp}\n          </Text>\n        </Flex>\n      </Td>\n      {isXs || isSm ? null : (\n        <Td>\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Td>\n      )}\n    </tr>\n  )\n}\n\nexport default ActivityRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\n\nconst GridItem = styled(Flex)`\n  align-items: center;\n`\n\nconst LoadingRow: React.FC = () => {\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  return (\n    <tr>\n      <Td>\n        <GridItem>\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\n        </GridItem>\n      </Td>\n      <Td>\n        <GridItem justifyContent=\"flex-end\">\n          <Skeleton height={[66, null, 24]} width={64} />\n        </GridItem>\n      </Td>\n      {isXs || isSm ? null : (\n        <>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={42} width={64} />\n            </GridItem>\n          </Td>\n          <Td>\n            <GridItem justifyContent=\"flex-end\">\n              <Skeleton height={48} width={124} />\n            </GridItem>\n          </Td>\n        </>\n      )}\n      <Td>\n        <GridItem justifyContent=\"center\">\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\n        </GridItem>\n      </Td>\n    </tr>\n  )\n}\n\nconst TableLoader: React.FC = () => (\n  <>\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n    <LoadingRow />\n  </>\n)\n\nexport default TableLoader\n","import styled from 'styled-components'\n\nconst NoNftsImage = styled.div`\n  background: url('/images/nfts/no-profile-md.png');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default NoNftsImage\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { uniqBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { fetchUserActivity } from 'state/nftMarket/reducer'\nimport { useAppDispatch } from 'state'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { ArrowBackIcon, ArrowForwardIcon, Card, Flex, Table, Text, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { getNftsFromDifferentCollectionsApi, getUserActivity } from 'state/nftMarket/helpers'\nimport { NftToken, TokenIdWithCollectionAddress, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport { useParams } from 'react-router'\nimport { Activity, sortUserActivity } from '../../utils/sortUserActivity'\nimport ActivityRow from './ActivityRow'\nimport TableLoader from './TableLoader'\nimport NoNftsImage from '../NoNftsImage'\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\n\nconst MAX_PER_PAGE = 8\n\nconst ActivityHistory = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const { activity: userActivity } = useUserNfts()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useEffect(() => {\n    if (account && userActivity.initializationState === UserNftInitializationState.INITIALIZED) {\n      const differentAddress =\n        accountAddress && isAddress(accountAddress)\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\n          : false\n      if (!differentAddress) {\n        setSortedUserActivities(sortUserActivity(account, userActivity))\n        setIsLoading(false)\n      }\n    }\n  }, [account, userActivity, accountAddress])\n\n  useEffect(() => {\n    const fetchAddressActivity = async () => {\n      try {\n        const addressActivity = await getUserActivity(accountAddress.toLocaleLowerCase())\n        setSortedUserActivities(sortUserActivity(accountAddress, addressActivity))\n        setIsLoading(false)\n      } catch (error) {\n        console.error('Failed to fetch address activity', error)\n      }\n    }\n\n    if (account) {\n      const differentAddress =\n        accountAddress && isAddress(accountAddress)\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\n          : false\n      if (differentAddress) {\n        fetchAddressActivity()\n      } else {\n        dispatch(fetchUserActivity(account))\n      }\n    } else if (accountAddress && isAddress(accountAddress)) {\n      fetchAddressActivity()\n    }\n  }, [account, accountAddress, dispatch])\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        sortedUserActivities.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages()\n      fetchActivityNftMetadata()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setNftMetadata([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedUserActivities])\n\n  useEffect(() => {\n    const getActivitiesSlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedUserActivities.length > 0) {\n      getActivitiesSlice()\n    }\n  }, [sortedUserActivities, currentPage])\n\n  return (\n    <Card>\n      {sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                <Th textAlign=\"right\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"right\"> {t('From/To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {isLoading ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nftMeta}\n                      bnbBusdPrice={bnbBusdPrice}\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\n                }}\n              >\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\n                }}\n              >\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityHistory\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useLocation, useParams } from 'react-router'\nimport BaseSubMenu from '../../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../../constants'\n\nconst SubMenuComponent: React.FC = () => {\n  const { t } = useTranslation()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { pathname } = useLocation()\n\n  const ItemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\n    },\n    {\n      label: t('Activity'),\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\n    },\n  ]\n\n  return <BaseSubMenu items={ItemsConfig} activeItem={pathname} justifyContent=\"flex-start\" mb=\"60px\" />\n}\n\nexport default SubMenuComponent\n","import React, { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport ProfileNftModal from '../../components/ProfileNftModal'\nimport NoNftsImage from './NoNftsImage'\nimport SellModal from '../../components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts = () => {\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useProfile } from 'state/profile/hooks'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { Route } from 'react-router'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { useAchievements, useFetchAchievements } from 'state/achievements/hooks'\nimport { AchievementFetchStatus } from 'state/types'\nimport { UserNftInitializationState } from 'state/nftMarket/types'\nimport useFetchUserNfts from './hooks/useFetchUserNfts'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport UserNfts from './components/UserNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst ConnectedProfile = () => {\n  const { profile, isLoading: isProfileLoading } = useProfile()\n  const { achievements, achievementFetchStatus } = useAchievements()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n\n  useFetchAchievements()\n  useFetchUserNfts()\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={account}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={userNfts.length}\n          isProfileLoading={isProfileLoading}\n          isNftLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\n          isAchievementsLoading={achievementFetchStatus !== AchievementFetchStatus.FETCHED}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements\n            achievements={achievements}\n            isLoading={achievementFetchStatus !== AchievementFetchStatus.FETCHED}\n            points={profile?.points}\n          />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UserNfts />\n        </Route>\n      </Page>\n    </>\n  )\n}\n\nexport default ConnectedProfile\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { State, AchievementState } from '../types'\nimport { fetchAchievements } from '.'\n\nexport const useFetchAchievements = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState = useSelector((state: State) => state.achievements)\n  return achievements\n}\n","import { useEffect, useMemo, useState } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { Profile } from 'state/types'\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\n\nconst useNftsForAddress = (account: string, profile: Profile, isProfileFetching: boolean) => {\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  useEffect(() => {\n    const getNfts = async () => {\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\n      setCombinedNfts(completeNftData)\n      setIsLoading(false)\n    }\n\n    if (!isProfileFetching && !isEmpty(collections)) {\n      setIsLoading(true)\n      getNfts()\n    }\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\n\n  return { nfts: combinedNfts, isLoading }\n}\n\nexport default useNftsForAddress\n","import React from 'react'\nimport { Grid, Text, Flex } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport NoNftsImage from './NoNftsImage'\n\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData } = nft\n\n            return (\n              <CollectibleLinkCard\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\nimport { Box } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { Route, useParams } from 'react-router'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport TabMenu from './components/TabMenu'\nimport Achievements from './components/Achievements'\nimport ActivityHistory from './components/ActivityHistory'\nimport SubMenu from './components/SubMenu'\nimport useNftsForAddress from './hooks/useNftsForAddress'\nimport UnconnectedProfileNfts from './components/UnconnectedProfileNfts'\n\nconst TabMenuWrapper = styled(Box)`\n  position: absolute;\n  bottom: 0;\n  left: 50%;\n  transform: translate(-50%, 0%);\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    left: auto;\n    transform: none;\n  }\n`\n\nconst UnconnectedProfile = () => {\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { profile: profileHookState, isFetching: isProfileFetching } = useProfileForAddress(accountAddress)\n  const { profile } = profileHookState || {}\n  const { achievements, isFetching: isAchievementFetching } = useAchievementsForAddress(accountAddress)\n  const { nfts, isLoading: isNftLoading } = useNftsForAddress(accountAddress, profile, isProfileFetching)\n\n  return (\n    <>\n      <MarketPageHeader position=\"relative\">\n        <ProfileHeader\n          accountPath={accountAddress}\n          profile={profile}\n          achievements={achievements}\n          nftCollected={nfts.length}\n          isProfileLoading={isProfileFetching}\n          isNftLoading={isNftLoading}\n          isAchievementsLoading={isAchievementFetching}\n        />\n        <TabMenuWrapper>\n          <TabMenu />\n        </TabMenuWrapper>\n      </MarketPageHeader>\n      <Page style={{ minHeight: 'auto' }}>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\n          <Achievements achievements={achievements} isLoading={isAchievementFetching} points={profile?.points} />\n        </Route>\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\n          <SubMenu />\n          <ActivityHistory />\n        </Route>\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\n          <SubMenu />\n          <UnconnectedProfileNfts nfts={nfts} isLoading={isNftLoading} />\n        </Route>\n      </Page>\n    </>\n  )\n}\n\nexport default UnconnectedProfile\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useParams } from 'react-router'\nimport { isAddress } from 'utils'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport Page from 'components/Layout/Page'\nimport { useTranslation } from 'contexts/Localization'\nimport ConnectedProfile from './ConnectedProfile'\nimport UnconnectedProfile from './UnconnectedProfile'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport ProfileHeader from './components/ProfileHeader'\nimport NoNftsImage from './components/NoNftsImage'\n\nconst NftProfile = () => {\n  const { account } = useWeb3React()\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { t } = useTranslation()\n\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\n  const invalidAddress = !accountAddress || isAddress(accountAddress) === false\n\n  if (invalidAddress) {\n    return (\n      <>\n        <MarketPageHeader position=\"relative\">\n          <ProfileHeader\n            accountPath={accountAddress}\n            profile={null}\n            achievements={null}\n            nftCollected={null}\n            isAchievementsLoading={false}\n            isNftLoading={false}\n            isProfileLoading={false}\n          />\n        </MarketPageHeader>\n        <Page style={{ minHeight: 'auto' }}>\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n            <NoNftsImage />\n            <Text textAlign=\"center\" maxWidth=\"420px\" pt=\"8px\" bold>\n              {t('Please enter a valid address, or connect your wallet to view your profile')}\n            </Text>\n          </Flex>\n        </Page>\n      </>\n    )\n  }\n\n  return <>{isConnectedProfile ? <ConnectedProfile /> : <UnconnectedProfile />}</>\n}\n\nexport default NftProfile\n"],"sourceRoot":""}