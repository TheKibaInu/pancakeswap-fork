{"version":3,"sources":["../node_modules/lodash/_shuffleSelf.js","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/sum.js","../node_modules/lodash/shuffle.js","../node_modules/lodash/_arrayShuffle.js","../node_modules/lodash/_baseShuffle.js","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/_baseSum.js","views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/styles.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/MainPancakeBunnyCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ManagePancakeBunniesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/CountdownCircle.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/UpdateIndicator.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/utils.ts","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ManageNFTsCard.tsx","views/Nft/market/hooks/useNftOwner.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/OwnerCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx"],"names":["baseRandom","require","module","exports","array","size","index","length","lastIndex","undefined","rand","value","useGetCollectionDistributionPB","useState","isFetching","data","state","setState","useEffect","a","prevState","getCollectionDistributionApi","pancakeBunniesAddress","apiResponse","fetchTokens","useGetCollectionDistribution","collectionAddress","baseSum","identity","arrayShuffle","baseShuffle","isArray","collection","copyArray","shuffleSelf","values","useAllPancakeBunnyNfts","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","getNftsFromCollectionApi","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","map","bunnyId","tokenId","name","description","collectionName","image","attributes","traitType","displayType","meta","currentAskPrice","updatedAt","fetchPancakeBunnies","iteratee","result","current","PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","account","useWeb3React","px","pt","src","thumbnail","fontSize","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","activeIndex","onItemClick","symbol","BNB","FetchStatus","SUCCESS","ConnectWalletButton","my","BASE_URL","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","setStage","confirmedTxHash","setConfirmedTxHash","isPaymentCurrentInitialized","setIsPaymentCurrentInitialized","useTheme","callWithGasPrice","useCallWithGasPrice","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","gte","WBNB","useApproveConfirmTransaction","onRequiresApproval","allowance","currentAllowance","gt","onApprove","ethers","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","TwoColumnsContainer","Flex","RoundedImage","Image","SmallRoundedImage","Container","CollectionLink","primary","mediaQueries","lg","CollectibleRowContainer","StyledSortButton","button","secondary","ButtonContainer","Box","TableHeading","MainPancakeBunnyCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","maxWidth","ScrollableContainer","Divider","div","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","nft","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","ManagePancakeBunniesCard","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","toFixed","PropertiesCard","properties","property","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","count","chainId","useActiveWeb3React","ipfsLink","uriToHttp","getBscScanLink","formatNumber","SwiperCircle","isActive","textDisabled","StyledSwiper","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","collectionNfts","useNftsFromCollection","isAddress","fetchNftsFromCollections","page","nftsToShow","useMemo","shuffle","isTradable","slidesPerView","maxPageIndex","reduce","nftArray","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","slideTo","goToSlide","slideNext","OwnersTableRow","Row","ownNft","currentSeller","toLowerCase","pl","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","countdownAnimation","CountdownContainer","primaryBright","CountdownCircle","secondsRemaining","isUpdating","lineHeight","r","cx","cy","UpdateIndicator","setSecondsRemaining","isFetchingMorePancakeBunnies","useLoadingState","isUpdatingPancakeBunnies","useTooltip","placement","tooltip","tooltipVisible","targetRef","intervalId","setInterval","clearInterval","ref","StyledCard","hasManyPages","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","setPage","itemsPerPage","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","ml","num","py","type","ForSaleTableRows","IndividualPancakeBunnyPage","setNothingForSaleBunny","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyIdAndUpdate","latestPancakeBunniesUpdateAt","fetchMorePancakeBunnies","fastRefresh","useRefresh","isWindowVisible","useIsWindowVisible","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","distributionData","isFetchingDistribution","Date","now","PANCAKE_BUNNIES_UPDATE_FREQUENCY","fetchBasicBunnyData","sortedNfts","sort","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","total","sum","getBunnyIdRarity","Page","metadataUrl","currentValue","MainNFTCard","isOwnNft","nftIsProfilePic","currentAskPriceAsNumber","onPresentSellModal","EditProfileModal","onEditProfileModal","ownerButtons","CollectibleByLocation","ManageNFTsCard","hasThisNft","useNftOwner","owner","setOwner","isLoadingOwner","setIsLoadingOwner","collectionContract","useErc721CollectionContract","getOwner","ownerOf","tokenOwner","OwnerRow","OwnerCard","padding","IndividualNFTPage","setNft","setIsOwnNft","fetchNftData","getNftApi","metadata","getNftsMarketData","nftOwnedByConnectedUser","userNft","userProfilePicture","rarityMap","nftAttributeValue","attribute","IndividualNFTPageRouter","useParams"],"mappings":"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","file":"static/js/14.c056e4de.chunk.js","sourcesContent":["var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","import { useEffect, useState } from 'react'\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\ninterface State {\n  isFetching: boolean\n  data: ApiCollectionDistribution['data']\n}\n\nconst useGetCollectionDistribution = (collectionAddress: string) => {\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setState])\n\n  return state\n}\n\ninterface StatePB {\n  isFetching: boolean\n  data: ApiCollectionDistributionPB['data']\n}\n\nexport const useGetCollectionDistributionPB = () => {\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      setState((prevState) => ({ ...prevState, isFetching: true }))\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\n      setState({\n        isFetching: false,\n        data: apiResponse.data,\n      })\n    }\n\n    fetchTokens()\n  }, [setState])\n\n  return state\n}\n\nexport default useGetCollectionDistribution\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import { TokenMarketData, Image } from 'state/nftMarket/types'\n\nexport enum PaymentCurrency {\n  BNB,\n  WBNB,\n}\n\nexport enum BuyingStage {\n  REVIEW,\n  APPROVE_AND_CONFIRM,\n  CONFIRM,\n  TX_CONFIRMED,\n}\n\nexport interface BuyNFT {\n  collection: {\n    address: string\n    name: string\n  }\n  token: TokenMarketData\n  name: string\n  image: Image\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { BuyingStage } from './types'\n\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `color: ${theme.colors.textSubtle}`\n        : null};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `fill: ${theme.colors.textSubtle}`\n        : null};\n  }\n`\n\nexport const BorderedBox = styled(Grid)`\n  margin: 16px 0;\n  padding: 16px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.default};\n  grid-template-columns: 1fr 1fr;\n  grid-row-gap: 8px;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n  isLoading?: boolean\n  isInsufficient?: boolean\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (isLoading) {\n    return (\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\n        <Skeleton width=\"86px\" height=\"20px\" />\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\n      <Flex justifyContent=\"flex-end\">\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })}`}</Text>\n      </Flex>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\nimport { FetchStatus } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_URL } from 'config'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { BorderedBox, BnbAmountCell } from './styles'\nimport { PaymentCurrency } from './types'\n\ninterface ReviewStageProps {\n  nftToBuy: NftToken\n  paymentCurrency: PaymentCurrency\n  setPaymentCurrency: (index: number) => void\n  nftPrice: number\n  walletBalance: number\n  walletFetchStatus: FetchStatus\n  notEnoughBnbForPurchase: boolean\n  continueToNextStage: () => void\n}\n\nconst ReviewStage: React.FC<ReviewStageProps> = ({\n  nftToBuy,\n  paymentCurrency,\n  setPaymentCurrency,\n  nftPrice,\n  walletBalance,\n  walletFetchStatus,\n  notEnoughBnbForPurchase,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  return (\n    <>\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\n        <Flex>\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {nftToBuy.collectionName}\n            </Text>\n            <Text bold>{nftToBuy.name}</Text>\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\n                {t('Token ID:')}\n              </Text>\n              <Button\n                as={Link}\n                scale=\"xs\"\n                px=\"0px\"\n                pt=\"2px\"\n                external\n                variant=\"text\"\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\n              >\n                {nftToBuy.tokenId}\n              </Button>\n            </Flex>\n          </Flex>\n        </Flex>\n        <BorderedBox>\n          <Text small color=\"textSubtle\">\n            {t('Pay with')}\n          </Text>\n          <ButtonMenu\n            activeIndex={paymentCurrency}\n            onItemClick={(index) => setPaymentCurrency(index)}\n            scale=\"sm\"\n            variant=\"subtle\"\n          >\n            <ButtonMenuItem>BNB</ButtonMenuItem>\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\n          </ButtonMenu>\n          <Text small color=\"textSubtle\">\n            {t('Total payment')}\n          </Text>\n          <BnbAmountCell bnbAmount={nftPrice} />\n          <Text small color=\"textSubtle\">\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\n          </Text>\n          {!account ? (\n            <Flex justifySelf=\"flex-end\">\n              <ConnectWalletButton scale=\"sm\" />\n            </Flex>\n          ) : (\n            <BnbAmountCell\n              bnbAmount={walletBalance}\n              isLoading={walletFetchStatus !== FetchStatus.SUCCESS}\n              isInsufficient={walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase}\n            />\n          )}\n        </BorderedBox>\n        {walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase && (\n          <Message p=\"8px\" variant=\"danger\">\n            <Text>\n              {t('Not enough %symbol% to purchase this NFT', {\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\n              })}\n            </Text>\n          </Message>\n        )}\n        <Flex alignItems=\"center\">\n          <Text my=\"16px\" mr=\"4px\">\n            {t('Convert between BNB and WBNB for free')}:\n          </Text>\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${BASE_URL}/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c`}\n          >\n            {t('Convert')}\n          </Button>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\n        <Button\n          onClick={continueToNextStage}\n          disabled={walletFetchStatus !== FetchStatus.SUCCESS || notEnoughBnbForPurchase}\n          mb=\"8px\"\n        >\n          {t('Checkout')}\n        </Button>\n        <Button\n          as={Link}\n          external\n          style={{ width: '100%' }}\n          href={`${BASE_URL}/swap?outputCurrency=BNB`}\n          variant=\"secondary\"\n        >\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ReviewStage\n","import React, { useEffect, useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useAppDispatch } from 'state'\nimport { addUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { StyledModal } from './styles'\nimport ReviewStage from './ReviewStage'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport { PaymentCurrency, BuyingStage } from './types'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\n\nconst modalTitles = {\n  [BuyingStage.REVIEW]: 'Review',\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\n  [BuyingStage.CONFIRM]: 'Back',\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\n}\n\ninterface BuyModalProps extends InjectedModalProps {\n  nftToBuy: NftToken\n}\n\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\n  const [isPaymentCurrentInitialized, setIsPaymentCurrentInitialized] = useState(false)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { account } = useWeb3React()\n  const wbnbContract = useERC20(tokens.wbnb.address)\n  const nftMarketContract = useNftMarketContract()\n\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\n\n  // BNB - returns ethers.BigNumber\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\n  // WBNB - returns BigNumber\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\n\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\n\n  const notEnoughBnbForPurchase =\n    paymentCurrency === PaymentCurrency.BNB\n      ? bnbBalance.lt(nftPriceWei)\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\n\n  useEffect(() => {\n    if (bnbBalance.lt(nftPriceWei) && wbnbBalance.gte(ethersToBigNumber(nftPriceWei)) && !isPaymentCurrentInitialized) {\n      setPaymentCurrency(PaymentCurrency.WBNB)\n      setIsPaymentCurrentInitialized(true)\n    }\n  }, [bnbBalance, wbnbBalance, nftPriceWei, isPaymentCurrentInitialized])\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\n        return currentAllowance.gt(0)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now buy NFT with WBNB!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      const payAmount = Number.isNaN(nftPrice)\n        ? ethers.BigNumber.from(0)\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\n      if (paymentCurrency === PaymentCurrency.BNB) {\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\n          value: payAmount,\n        })\n      }\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\n        nftToBuy.collectionAddress,\n        nftToBuy.tokenId,\n        payAmount,\n      ])\n    },\n    onSuccess: async ({ receipt }) => {\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(BuyingStage.TX_CONFIRMED)\n      dispatch(\n        addUserNft({\n          tokenId: nftToBuy.tokenId,\n          collectionAddress: nftToBuy.collectionAddress,\n          nftLocation: NftLocation.WALLET,\n        }),\n      )\n      toastSuccess(\n        t('Your NFT has been sent to your wallet'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n  })\n\n  const continueToNextStage = () => {\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\n    } else {\n      setStage(BuyingStage.CONFIRM)\n    }\n  }\n\n  const goBack = () => {\n    setStage(BuyingStage.REVIEW)\n  }\n\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\n\n  return (\n    <StyledModal\n      title={t(modalTitles[stage])}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === BuyingStage.REVIEW && (\n        <ReviewStage\n          nftToBuy={nftToBuy}\n          paymentCurrency={paymentCurrency}\n          setPaymentCurrency={setPaymentCurrency}\n          nftPrice={nftPrice}\n          walletBalance={walletBalance}\n          walletFetchStatus={walletFetchStatus}\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\n          continueToNextStage={continueToNextStage}\n        />\n      )}\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\n        <ApproveAndConfirmStage\n          variant=\"buy\"\n          handleApprove={handleApprove}\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n    </StyledModal>\n  )\n}\n\nexport default BuyModal\n","import styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Grid, Image } from '@pancakeswap/uikit'\n\nexport const TwoColumnsContainer = styled(Flex)`\n  gap: 22px;\n  align-items: flex-start;\n  & > div:first-child {\n    flex: 1;\n    gap: 20px;\n  }\n  & > div:last-child {\n    flex: 2;\n  }\n`\n\nexport const RoundedImage = styled(Image)`\n  height: max-content;\n  border-radius: ${({ theme }) => theme.radii.default};\n  overflow: hidden;\n  & > img {\n    object-fit: contain;\n  }\n`\n\nexport const SmallRoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\nexport const Container = styled(Flex)`\n  gap: 24px;\n`\n\nexport const CollectionLink = styled(Link)`\n  color: ${({ theme }) => theme.colors.primary};\n  display: block;\n  font-weight: 600;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: 50px;\n  }\n`\n\nexport const CollectibleRowContainer = styled(Grid)`\n  &:hover {\n    opacity: 0.5;\n    cursor: pointer;\n  }\n`\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n\nexport const ButtonContainer = styled(Box)`\n  text-align: right;\n  padding-right: 24px;\n`\n\nexport const TableHeading = styled(Grid)`\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n","import React from 'react'\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../../constants'\nimport { RoundedImage, Container, CollectionLink } from '../shared/styles'\n\ninterface MainPancakeBunnyCardProps {\n  cheapestNft: NftToken\n  cheapestNftFromOtherSellers?: NftToken\n  nothingForSaleBunny?: NftToken\n}\n\nconst MainPancakeBunnyCard: React.FC<MainPancakeBunnyCardProps> = ({\n  cheapestNft,\n  cheapestNftFromOtherSellers,\n  nothingForSaleBunny,\n}) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\n\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\n\n  const actionButton = onlyOwnNftsOnSale ? (\n    <Button\n      variant=\"danger\"\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentAdjustPriceModal}\n    >\n      {t('Adjust Sale Price')}\n    </Button>\n  ) : (\n    <Button\n      disabled={onlyOwnNftsOnSale}\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentBuyModal}\n    >\n      {t('Buy')}\n    </Button>\n  )\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\n                {nftToDisplay.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nftToDisplay.name}\n              </Text>\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\n                <>\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                    {t('Lowest price')}\n                  </Text>\n                  <Flex alignItems=\"center\" mt=\"8px\">\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\n                      {nftToDisplay.marketData.currentAskPrice}\n                    </Text>\n                    {bnbBusdPrice ? (\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })} USD)`}</Text>\n                    ) : (\n                      <Skeleton width=\"64px\" />\n                    )}\n                  </Flex>\n                </>\n              )}\n              {hasListings && actionButton}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\n            <RoundedImage src={nftToDisplay.image.thumbnail} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainPancakeBunnyCard\n","import React, { useState } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 720px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 710px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n`\n\nconst FullWidthCard = styled(Card)`\n  width: 100%;\n`\n\ninterface ExpandableCardProps {\n  icon: React.ReactNode\n  title: string\n  content: React.ReactNode\n}\n\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\n  const [expanded, setExpanded] = useState(true)\n  const { theme } = useTheme()\n  return (\n    <FullWidthCard>\n      <Grid\n        gridTemplateColumns=\"1fr 8fr 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        {icon}\n        <Text bold>{title}</Text>\n        <IconButton\n          onClick={() => {\n            setExpanded((prev) => !prev)\n          }}\n          variant=\"text\"\n          maxWidth=\"32px\"\n        >\n          {expanded ? (\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          ) : (\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          )}\n        </IconButton>\n      </Grid>\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\n    </FullWidthCard>\n  )\n}\n\nexport default ExpandableCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from '../shared/ExpandableCard'\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../../components/ProfileNftModal'\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\n\nconst ScrollableContainer = styled(Box)`\n  overflow-y: auto;\n  max-height: 224px;\n`\n\nconst Divider = styled.div`\n  margin: 16px 20px;\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n  lowestPrice: string\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {lowestPrice && (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Lowest price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{lowestPrice}</Text>\n            </Flex>\n          </>\n        )}\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectiblesByLocationProps {\n  location: NftLocation\n  nfts: NftToken[]\n  lowestPrice: string\n}\n\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[location]}>\n          {t(location)}\n        </Text>\n      </Grid>\n      <ScrollableContainer>\n        {nfts.map((nft) => (\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\n        ))}\n      </ScrollableContainer>\n    </Flex>\n  )\n}\n\ninterface ManagePancakeBunniesCardProps {\n  bunnyId: string\n  lowestPrice?: string\n}\n\nconst ManagePancakeBunniesCard: React.FC<ManagePancakeBunniesCardProps> = ({ bunnyId, lowestPrice }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts()\n\n  const bunniesInWallet = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\n  )\n  const bunniesForSale = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\n  )\n  const profilePicBunny = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\n  )\n\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\n  const useHasNoBunnies =\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\n\n  const content = (\n    <Box pt=\"16px\">\n      {!account && (\n        <Flex mb=\"16px\" justifyContent=\"center\">\n          <ConnectWalletButton />\n        </Flex>\n      )}\n      {useHasNoBunnies && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have any of this item.')}\n        </Text>\n      )}\n      {account && loading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {bunniesForSale.length > 0 && (\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\n      )}\n      {bunniesInWallet.length > 0 && (\n        <>\n          {bunniesForSale.length > 0 && <Divider />}\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\n        </>\n      )}\n      {profilePicBunny.length > 0 && (\n        <>\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\n        </>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default ManagePancakeBunniesCard\n","import React from 'react'\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftAttribute } from 'state/nftMarket/types'\nimport ExpandableCard from './ExpandableCard'\n\ninterface PropertiesCardProps {\n  properties: NftAttribute[]\n  rarity: { [key: string]: number }\n}\n\n// Map of known traits to human-readable text\nconst KNOWN_TRAITS_TEXT = {\n  bunnyId: 'Bunny ID',\n}\n\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: number }> = ({\n  title,\n  value,\n  rarity,\n}) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n        {KNOWN_TRAITS_TEXT[title] ?? title}\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\n          {value}\n        </Text>\n        {rarity && (\n          <Text small color=\"textSubtle\">\n            ({rarity.toFixed(2)}%)\n          </Text>\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\n  const { t } = useTranslation()\n  const content = (\n    <Box p=\"24px\">\n      {properties.map((property) => (\n        <SingleProperty\n          key={property.traitType}\n          title={property.traitType}\n          value={property.value}\n          rarity={rarity[property.traitType]}\n        />\n      ))}\n    </Box>\n  )\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default PropertiesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport uriToHttp from 'utils/uriToHttp'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ExpandableCard from './ExpandableCard'\n\ninterface DetailsCardProps {\n  contractAddress: string\n  ipfsJson: string\n  count?: number\n  rarity?: number\n}\n\nconst LongTextContainer = styled(Text)`\n  max-width: 120px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson, count, rarity }) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const ipfsLink = ipfsJson ? uriToHttp(ipfsJson)[0] : null\n  const content = (\n    <Box p=\"24px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n          {t('Contract address')}\n        </Text>\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\n        </Link>\n      </Flex>\n      {ipfsLink && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            IPFS JSON\n          </Text>\n          <Link external href={ipfsLink}>\n            <LongTextContainer bold>{ipfsLink}</LongTextContainer>\n          </Link>\n        </Flex>\n      )}\n      {count && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\" mr=\"4px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            {t('Supply Count')}\n          </Text>\n          <LongTextContainer bold>{formatNumber(count, 0, 0)}</LongTextContainer>\n        </Flex>\n      )}\n      {rarity && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mr=\"4px\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            {t('Rarity')}\n          </Text>\n          <LongTextContainer bold>{`${formatNumber(rarity, 0, 2)}%`}</LongTextContainer>\n        </Flex>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default DetailsCard\n","import React, { useState, useEffect, useMemo } from 'react'\nimport shuffle from 'lodash/shuffle'\nimport styled from 'styled-components'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport SwiperCore from 'swiper'\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { isAddress } from 'utils'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\nimport { useAppDispatch } from 'state'\nimport { pancakeBunniesAddress } from '../../../constants'\nimport { CollectibleLinkCard } from '../../../components/CollectibleCard'\nimport useAllPancakeBunnyNfts from '../../../hooks/useAllPancakeBunnyNfts'\n\nimport 'swiper/swiper-bundle.css'\n\nconst INITIAL_SLIDE = 4\n\nconst SwiperCircle = styled.div<{ isActive }>`\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\n  width: 12px;\n  height: 12px;\n  margin-right: 8px;\n  border-radius: 50%;\n  cursor: pointer;\n`\n\nconst StyledSwiper = styled.div`\n  ${({ theme }) => theme.mediaQueries.md} {\n    .swiper-wrapper {\n      max-height: 390px;\n    }\n  }\n`\n\ninterface MoreFromThisCollectionProps {\n  collectionAddress: string\n  currentTokenName?: string\n  title?: string\n}\n\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({\n  collectionAddress,\n  currentTokenName = '',\n  title = 'More from this collection',\n}) => {\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\n  const [activeIndex, setActiveIndex] = useState(1)\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(collectionAddress)\n  const collectionNfts = useNftsFromCollection(collectionAddress)\n\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\n\n  useEffect(() => {\n    if (!isPBCollection && !collectionNfts) {\n      dispatch(\n        fetchNftsFromCollections({\n          collectionAddress: isAddress(collectionAddress) || collectionAddress,\n          page: 1,\n          size: 100,\n        }),\n      )\n    }\n  }, [collectionNfts, collectionAddress, dispatch, isPBCollection])\n\n  let nftsToShow = useMemo(() => {\n    return shuffle(\n      allPancakeBunnyNfts\n        ? allPancakeBunnyNfts.filter((nft) => nft.name !== currentTokenName)\n        : collectionNfts?.filter((nft) => nft.name !== currentTokenName && nft.marketData?.isTradable),\n    )\n  }, [allPancakeBunnyNfts, collectionNfts, currentTokenName])\n\n  if (!nftsToShow || nftsToShow.length === 0) {\n    return null\n  }\n\n  let slidesPerView = 4\n  let maxPageIndex = 3\n\n  if (isMd) {\n    slidesPerView = 2\n    maxPageIndex = 6\n  }\n\n  if (isLg) {\n    slidesPerView = 3\n    maxPageIndex = 4\n  }\n\n  if (isPBCollection) {\n    // PancakeBunnies should display 1 card per bunny id\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\n      const bunnyId = current.attributes[0].value\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\n        nftArray.push(current)\n      }\n      return nftArray\n    }, [])\n  }\n  nftsToShow = nftsToShow.slice(0, 12)\n\n  const nextSlide = () => {\n    if (activeIndex < maxPageIndex - 1) {\n      setActiveIndex((index) => index + 1)\n      swiperRef.slideNext()\n    }\n  }\n\n  const previousSlide = () => {\n    if (activeIndex > 0) {\n      setActiveIndex((index) => index - 1)\n      swiperRef.slidePrev()\n    }\n  }\n\n  const goToSlide = (index: number) => {\n    setActiveIndex(index / slidesPerView)\n    swiperRef.slideTo(index)\n  }\n\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\n  }\n\n  return (\n    <Box pt=\"56px\" mb=\"52px\">\n      {title && (\n        <Text bold mb=\"24px\">\n          {t(title)}\n        </Text>\n      )}\n      {isMobile ? (\n        <StyledSwiper>\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n        </StyledSwiper>\n      ) : (\n        <StyledSwiper>\n          <Swiper\n            onSwiper={setSwiperRef}\n            onActiveIndexChange={updateActiveIndex}\n            spaceBetween={16}\n            slidesPerView={slidesPerView}\n            slidesPerGroup={slidesPerView}\n            initialSlide={INITIAL_SLIDE}\n          >\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard\n                  nft={nft}\n                  currentAskPrice={isPBCollection ? null : parseFloat(nft.marketData?.currentAskPrice)}\n                />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\n            <IconButton variant=\"text\" onClick={previousSlide}>\n              <ArrowBackIcon />\n            </IconButton>\n            {[...Array(maxPageIndex).keys()].map((index) => (\n              <SwiperCircle\n                key={index}\n                onClick={() => goToSlide(index * slidesPerView)}\n                isActive={activeIndex === index}\n              />\n            ))}\n            <IconButton variant=\"text\" onClick={nextSlide}>\n              <ArrowForwardIcon />\n            </IconButton>\n          </Flex>\n        </StyledSwiper>\n      )}\n    </Box>\n  )\n}\n\nexport default MoreFromThisCollection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Price } from '@pancakeswap/sdk'\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\nimport { ButtonContainer } from '../../shared/styles'\n\nconst OwnersTableRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  & > div {\n    padding-bottom: 16px;\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n  }\n`\n\ninterface RowProps {\n  t: ContextApi['t']\n  nft: NftToken\n  bnbBusdPrice: Price\n  account: string\n}\n\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\n\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\n\n  return (\n    <>\n      <Box pl=\"24px\">\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n        </Flex>\n        {bnbBusdPrice ? (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n          </Text>\n        ) : (\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n        )}\n      </Box>\n      <Box>\n        <Flex width=\"max-content\" alignItems=\"center\">\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\n        </Flex>\n      </Box>\n      <ButtonContainer>\n        {ownNft ? (\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\n            {t('Edit')}\n          </Button>\n        ) : (\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\n            {t('Buy')}\n          </Button>\n        )}\n      </ButtonContainer>\n    </>\n  )\n}\n\ninterface ForSaleTableRowsProps {\n  nftsForSale: NftToken[]\n}\n\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n  return (\n    <OwnersTableRow>\n      {nftsForSale.map((nft) => (\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\n      ))}\n    </OwnersTableRow>\n  )\n}\n\nexport default ForSaleTableRow\n","import { Spinner, Text } from '@pancakeswap/uikit'\nimport React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst countdownAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0px;\n  }\n  to {\n    stroke-dashoffset: 113px;\n  }\n`\n\nconst CountdownContainer = styled.div`\n  position: relative;\n  margin: auto;\n  height: 40px;\n  width: 40px;\n  text-align: center;\n\n  & svg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 40px;\n    height: 40px;\n    transform: rotateY(-180deg) rotateZ(-90deg);\n\n    & circle {\n      stroke-dasharray: 113px;\n      stroke-dashoffset: 0px;\n      stroke-linecap: round;\n      stroke-width: 2px;\n      stroke: ${({ theme }) => theme.colors.primaryBright};\n      fill: none;\n      animation: ${countdownAnimation} 10s linear infinite forwards;\n    }\n  }\n`\n\ninterface CountdownCircleProps {\n  secondsRemaining: number\n  isUpdating: boolean\n}\n\nconst CountdownCircle: React.FC<CountdownCircleProps> = ({ secondsRemaining, isUpdating }) => {\n  if (secondsRemaining < 1 || isUpdating) {\n    return <Spinner size={42} />\n  }\n  return (\n    <CountdownContainer>\n      <Text color=\"textSubtle\" lineHeight=\"40px\" display=\"inline-block\">\n        {secondsRemaining}\n      </Text>\n      <svg>\n        <circle r=\"18\" cx=\"20\" cy=\"20\" />\n      </svg>\n    </CountdownContainer>\n  )\n}\n\nexport default CountdownCircle\n","import React, { useEffect, useState } from 'react'\nimport { Flex, useTooltip } from '@pancakeswap/uikit'\nimport { useLoadingState } from 'state/nftMarket/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CountdownCircle from './CountdownCircle'\n\nconst UpdateIndicator = () => {\n  const { t } = useTranslation()\n  const [secondsRemaining, setSecondsRemaining] = useState(10)\n  const { isUpdatingPancakeBunnies: isFetchingMorePancakeBunnies } = useLoadingState()\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(t('Items in the table update every 10 seconds'), {\n    placement: 'auto',\n  })\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setSecondsRemaining((prev) => prev - 1)\n    }, 1000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!isFetchingMorePancakeBunnies) {\n      setSecondsRemaining(10)\n    }\n  }, [isFetchingMorePancakeBunnies])\n\n  return (\n    <Flex justifyContent=\"center\" ref={targetRef}>\n      <CountdownCircle secondsRemaining={secondsRemaining} isUpdating={isFetchingMorePancakeBunnies} />\n      {tooltipVisible && tooltip}\n    </Flex>\n  )\n}\n\nexport default UpdateIndicator\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Flex,\n  Card,\n  Grid,\n  SellIcon,\n  Text,\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  useMatchBreakpoints,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  Button,\n  Spinner,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport ForSaleTableRows from './ForSaleTableRows'\nimport { StyledSortButton, TableHeading } from '../../shared/styles'\nimport UpdateIndicator from './UpdateIndicator'\nimport { Arrow, PageButtons } from '../../../../components/PaginationButtons'\n\nconst ITEMS_PER_PAGE_DESKTOP = 10\nconst ITEMS_PER_PAGE_MOBILE = 5\n\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\n  width: 100%;\n  & > div:first-child {\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\n    display: flex;\n    flex-direction: column;\n    ${({ theme }) => theme.mediaQueries.md} {\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\n    }\n  }\n`\n\ninterface ForSaleTableCardProps {\n  nftsForSale: NftToken[]\n  bunnyId: string\n  totalForSale: number\n  priceSort: 'asc' | 'desc'\n  isFetchingMoreNfts: boolean\n  togglePriceSort: () => void\n  loadMore: (orderDirection: 'asc' | 'desc') => void\n}\n\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\n  nftsForSale,\n  bunnyId,\n  totalForSale,\n  loadMore,\n  isFetchingMoreNfts,\n  priceSort,\n  togglePriceSort,\n}) => {\n  const [page, setPage] = useState(1)\n  const { isMobile } = useMatchBreakpoints()\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\n\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  useEffect(() => {\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\n    // Same for reversing sorting direction\n    setPage(1)\n  }, [bunnyId, priceSort])\n\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\n  if (needsExtraPage) {\n    maxPage += 1\n  }\n\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n\n  const switchPage = (pageNumber: number) => {\n    setPage(pageNumber)\n  }\n\n  const loadMoreHandler = () => {\n    loadMore(priceSort)\n  }\n\n  const loadMoreButton = isFetchingMoreNfts ? (\n    <Flex width=\"96px\" justifyContent=\"center\">\n      <Spinner size={32} />\n    </Flex>\n  ) : (\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\n      {t('Load more')}\n    </Button>\n  )\n\n  return (\n    <StyledCard hasManyPages={maxPage > 1}>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr 48px\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\n        <UpdateIndicator />\n      </Grid>\n      {nftsOnCurrentPage.length > 0 ? (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\n              <Flex alignItems=\"center\">\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                  {t('Price')}\n                </Text>\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\n              </Flex>\n            </StyledSortButton>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  switchPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              {page === maxPage ? (\n                loadMoreButton\n              ) : (\n                <Arrow\n                  onClick={() => {\n                    switchPage(page === maxPage ? page : page + 1)\n                  }}\n                >\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n                </Arrow>\n              )}\n            </PageButtons>\n          </Flex>\n        </>\n      ) : (\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\n          <Text>{t('No items for sale')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default ForSaleTableCard\n","import React, { useState, useEffect, useMemo } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport sum from 'lodash/sum'\nimport Page from 'components/Layout/Page'\nimport { useFetchByBunnyIdAndUpdate, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport useRefresh from 'hooks/useRefresh'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\nimport { PANCAKE_BUNNIES_UPDATE_FREQUENCY } from 'config'\nimport { useGetCollectionDistributionPB } from 'views/Nft/market/hooks/useGetCollectionDistribution'\nimport MainPancakeBunnyCard from './MainPancakeBunnyCard'\nimport ManagePancakeBunniesCard from './ManagePancakeBunniesCard'\nimport PropertiesCard from '../shared/PropertiesCard'\nimport DetailsCard from '../shared/DetailsCard'\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\nimport ForSaleTableCard from './ForSaleTableCard'\nimport { pancakeBunniesAddress } from '../../../constants'\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\nimport { SortType } from '../../../types'\nimport { TwoColumnsContainer } from '../shared/styles'\n\ninterface IndividualPancakeBunnyPageProps {\n  bunnyId: string\n}\n\nconst IndividualPancakeBunnyPage: React.FC<IndividualPancakeBunnyPageProps> = ({ bunnyId }) => {\n  const { account } = useWeb3React()\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\n  const allBunnies = useGetAllBunniesByBunnyId(bunnyId)\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\n  const previousPriceSort = usePreviousValue(priceSort)\n  const { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies } =\n    useFetchByBunnyIdAndUpdate(bunnyId)\n  const { fastRefresh } = useRefresh()\n  const isWindowVisible = useIsWindowVisible()\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\n  const allBunniesFromOtherSellers = account\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\n    : bunniesSortedByPrice\n  const cheapestBunny = bunniesSortedByPrice[0]\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\n\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistributionPB()\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every FETCH_NEW_NFTS_INTERVAL_MS in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestPancakeBunniesUpdateAt\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n    // Since fastRefresh is 10 seconds and FETCH_NEW_NFTS_INTERVAL_MS is 8 seconds it fires every 10 seconds\n    // The difference in 2 seconds is just to prevent some edge cases when request takes too long\n    if (msSinceLastUpdate > PANCAKE_BUNNIES_UPDATE_FREQUENCY && !isUpdatingPancakeBunnies && isWindowVisible) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [\n    priceSort,\n    fetchMorePancakeBunnies,\n    isUpdatingPancakeBunnies,\n    latestPancakeBunniesUpdateAt,\n    fastRefresh,\n    isWindowVisible,\n  ])\n\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\n\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[bunnyId].name,\n        name: data[bunnyId].name,\n        description: data[bunnyId].description,\n        collectionName: data[bunnyId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[bunnyId].image,\n        attributes: [\n          {\n            traitType: 'bunnyId',\n            value: bunnyId,\n            displayType: null,\n          },\n        ],\n      })\n    }\n    // If bunny id has no listings on the market - get basic bunny info\n    if (!cheapestBunny) {\n      fetchBasicBunnyData()\n    }\n  }, [cheapestBunny, bunnyId])\n\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  const getBunnyIdCount = () => {\n    if (distributionData && !isFetchingDistribution) {\n      return distributionData[bunnyId]\n    }\n    return null\n  }\n\n  const getBunnyIdRarity = () => {\n    if (distributionData && !isFetchingDistribution) {\n      const total = sum(Object.values(distributionData))\n      return (distributionData[bunnyId] / total) * 100\n    }\n    return null\n  }\n\n  const properties = cheapestBunny?.attributes || nothingForSaleBunny?.attributes\n\n  const propertyRarity = { bunnyId: getBunnyIdRarity() }\n\n  return (\n    <Page>\n      <MainPancakeBunnyCard\n        cheapestNft={cheapestBunny}\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\n        nothingForSaleBunny={nothingForSaleBunny}\n      />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManagePancakeBunniesCard bunnyId={bunnyId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\n          <DetailsCard\n            contractAddress={pancakeBunniesAddress}\n            ipfsJson={cheapestBunny?.marketData?.metadataUrl}\n            rarity={propertyRarity?.bunnyId}\n            count={getBunnyIdCount()}\n          />\n        </Flex>\n        <ForSaleTableCard\n          nftsForSale={sortedNfts}\n          bunnyId={bunnyId}\n          totalForSale={allBunnies.length}\n          loadMore={fetchMorePancakeBunnies}\n          priceSort={priceSort}\n          togglePriceSort={togglePriceSort}\n          isFetchingMoreNfts={isUpdatingPancakeBunnies}\n        />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection\n        collectionAddress={pancakeBunniesAddress}\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\n      />\n    </Page>\n  )\n}\n\nexport default IndividualPancakeBunnyPage\n","type sortBuilder = {\n  priceSort: string\n}\n\nexport const sortNFTsByPriceBuilder =\n  ({ priceSort }: sortBuilder) =>\n  (nftA, nftB) => {\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\n\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\n  }\n","import React from 'react'\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../../constants'\nimport { RoundedImage, Container, CollectionLink } from '../shared/styles'\n\ninterface MainNFTCardProps {\n  nft: NftToken\n  isOwnNft: boolean\n  nftIsProfilePic: boolean\n}\n\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const currentAskPriceAsNumber = nft.marketData?.currentAskPrice ? parseFloat(nft.marketData.currentAskPrice) : 0\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, currentAskPriceAsNumber)\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentSellModal] = useModal(\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\n  )\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const ownerButtons = (\n    <Flex flexDirection={['column', 'column', 'row']}>\n      <Button\n        disabled={nftIsProfilePic}\n        minWidth=\"168px\"\n        mr=\"16px\"\n        width={['100%', null, 'max-content']}\n        mt=\"24px\"\n        onClick={onPresentSellModal}\n      >\n        {nft.marketData?.isTradable ? t('Adjust price') : t('List for sale')}\n      </Button>\n      {!nft.marketData?.isTradable && (\n        <Button\n          minWidth=\"168px\"\n          variant=\"secondary\"\n          width={['100%', null, 'max-content']}\n          mt=\"24px\"\n          onClick={onEditProfileModal}\n        >\n          {nftIsProfilePic ? t('Change Profile Pic') : t('Set as Profile Pic')}\n        </Button>\n      )}\n    </Flex>\n  )\n\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nft.collectionAddress}`}>\n                {nft.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nft.name}\n              </Text>\n              {nft.description && <Text mt={['16px', '16px', '48px']}>{t(nft.description)}</Text>}\n              <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                {t('Price')}\n              </Text>\n              {currentAskPriceAsNumber > 0 ? (\n                <Flex alignItems=\"center\" mt=\"8px\">\n                  <BinanceIcon width={18} height={18} mr=\"4px\" />\n                  <Text fontSize=\"24px\" bold mr=\"4px\">\n                    {nft.marketData.currentAskPrice}\n                  </Text>\n                  {bnbBusdPrice ? (\n                    <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                      minimumFractionDigits: 2,\n                      maximumFractionDigits: 2,\n                    })} USD)`}</Text>\n                  ) : (\n                    <Skeleton width=\"64px\" />\n                  )}\n                </Flex>\n              ) : (\n                <Text>{t('Not for sale')}</Text>\n              )}\n              {nftIsProfilePic && (\n                <Text color=\"failure\">\n                  {t(\n                    'This NFT is your profile picture, you must change it to some other NFT if you want to sell this one.',\n                  )}\n                </Text>\n              )}\n              {isOwnNft && ownerButtons}\n              {!isOwnNft && (\n                <Button\n                  minWidth=\"168px\"\n                  disabled={!nft.marketData?.isTradable}\n                  mr=\"16px\"\n                  width={['100%', null, 'max-content']}\n                  mt=\"24px\"\n                  onClick={onPresentBuyModal}\n                >\n                  {t('Buy')}\n                </Button>\n              )}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\n            <RoundedImage src={nft.image.thumbnail} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainNFTCard\n","import React from 'react'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from '../shared/ExpandableCard'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../../components/ProfileNftModal'\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectibleByLocationProps {\n  nft: NftToken\n}\n\nconst CollectibleByLocation: React.FC<CollectibleByLocationProps> = ({ nft }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[nft.location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[nft.location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[nft.location]}>\n          {t(nft.location)}\n        </Text>\n      </Grid>\n      <CollectibleRow key={nft.tokenId} nft={nft} />\n    </Flex>\n  )\n}\n\ninterface ManageNFTsCardProps {\n  nft?: NftToken\n  isLoading: boolean\n  isOwnNft: boolean\n}\n\nconst ManageNFTsCard: React.FC<ManageNFTsCardProps> = ({ nft, isLoading, isOwnNft }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const hasThisNft = isOwnNft && nft\n\n  const content = (\n    <Box pt=\"16px\">\n      {!account && (\n        <Flex mb=\"16px\" justifyContent=\"center\">\n          <ConnectWalletButton />\n        </Flex>\n      )}\n      {account && isLoading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {!isLoading && !hasThisNft && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have this item.')}\n        </Text>\n      )}\n      {!isLoading && hasThisNft && <CollectibleByLocation nft={nft} />}\n    </Box>\n  )\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default ManageNFTsCard\n","import { useEffect, useState } from 'react'\nimport { useErc721CollectionContract } from 'hooks/useContract'\nimport { NftToken } from 'state/nftMarket/types'\n\nconst NOT_ON_SALE_SELLER = '0x0000000000000000000000000000000000000000'\n\nconst useNftOwner = (nft: NftToken) => {\n  const [owner, setOwner] = useState(null)\n  const [isLoadingOwner, setIsLoadingOwner] = useState(true)\n  const collectionContract = useErc721CollectionContract(nft.collectionAddress)\n  const currentSeller = nft.marketData?.currentSeller\n  const { tokenId } = nft\n\n  useEffect(() => {\n    const getOwner = async () => {\n      try {\n        const tokenOwner = await collectionContract.ownerOf(tokenId)\n        setOwner(tokenOwner)\n      } catch (error) {\n        setOwner(null)\n      } finally {\n        setIsLoadingOwner(false)\n      }\n    }\n\n    if (currentSeller && currentSeller !== NOT_ON_SALE_SELLER) {\n      setOwner(currentSeller)\n      setIsLoadingOwner(false)\n    } else {\n      getOwner()\n    }\n  }, [currentSeller, collectionContract, tokenId])\n\n  return { owner, isLoadingOwner }\n}\n\nexport default useNftOwner\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Card, Grid, SellIcon, Text, useModal, Box, BinanceIcon, Skeleton, Button } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { formatNumber } from 'utils/formatBalance'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport useNftOwner from 'views/Nft/market/hooks/useNftOwner'\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\nimport SellModal from '../../../components/BuySellModals/SellModal'\nimport ProfileCell from '../../../components/ProfileCell'\nimport { ButtonContainer, TableHeading } from '../shared/styles'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n  & > div:first-child {\n    display: flex;\n    flex-direction: column;\n  }\n`\n\nconst OwnerRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  margin-bottom: 8px;\n  align-items: center;\n`\n\ninterface OwnerCardProps {\n  nft: NftToken\n  isOwnNft: boolean\n  nftIsProfilePic: boolean\n}\n\nconst OwnerCard: React.FC<OwnerCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const { owner, isLoadingOwner } = useNftOwner(nft)\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData?.currentAskPrice))\n\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\n  )\n\n  return (\n    <StyledCard>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('Owner')}</Text>\n      </Grid>\n      {owner && (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <Flex alignItems=\"center\">\n              <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                {t('Price')}\n              </Text>\n            </Flex>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <OwnerRow>\n            <Box pl=\"24px\">\n              {nft.marketData?.isTradable ? (\n                <>\n                  <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n                    <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n                    <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n                  </Flex>\n                  {bnbBusdPrice ? (\n                    <Text fontSize=\"12px\" color=\"textSubtle\">\n                      {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n                    </Text>\n                  ) : (\n                    <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n                  )}\n                </>\n              ) : (\n                <Flex alignItems=\"center\" height=\"100%\">\n                  <Text>{t('Not for sale')}</Text>\n                </Flex>\n              )}\n            </Box>\n            <Box>\n              <Flex width=\"max-content\" alignItems=\"center\">\n                <ProfileCell accountAddress={owner.toLowerCase()} />\n              </Flex>\n            </Box>\n            <ButtonContainer>\n              {isOwnNft ? (\n                <Button\n                  disabled={nftIsProfilePic}\n                  scale=\"sm\"\n                  variant=\"secondary\"\n                  maxWidth=\"128px\"\n                  onClick={onPresentAdjustPriceModal}\n                >\n                  {nft.marketData?.isTradable ? t('Manage') : t('Sell')}\n                </Button>\n              ) : (\n                <Button\n                  disabled={!nft.marketData?.isTradable}\n                  scale=\"sm\"\n                  variant=\"secondary\"\n                  maxWidth=\"128px\"\n                  onClick={onPresentBuyModal}\n                >\n                  {t('Buy')}\n                </Button>\n              )}\n            </ButtonContainer>\n          </OwnerRow>\n        </>\n      )}\n      {isLoadingOwner && <Skeleton />}\n      {!isLoadingOwner && !owner && (\n        <Flex justifyContent=\"center\" alignItems=\"center\" padding=\"24px\">\n          <Text>{t('Owner information is not available for this item')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default OwnerCard\n","import React, { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport sum from 'lodash/sum'\nimport Page from 'components/Layout/Page'\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport MainNFTCard from './MainNFTCard'\nimport ManageNFTsCard from './ManageNFTsCard'\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\nimport { TwoColumnsContainer } from '../shared/styles'\nimport PropertiesCard from '../shared/PropertiesCard'\nimport DetailsCard from '../shared/DetailsCard'\nimport useGetCollectionDistribution from '../../../hooks/useGetCollectionDistribution'\nimport OwnerCard from './OwnerCard'\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\n\ninterface IndividualNFTPageProps {\n  collectionAddress: string\n  tokenId: string\n}\n\nconst IndividualNFTPage: React.FC<IndividualNFTPageProps> = ({ collectionAddress, tokenId }) => {\n  const [nft, setNft] = useState<NftToken>(null)\n  const [isOwnNft, setIsOwnNft] = useState(false)\n\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistribution(collectionAddress)\n\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts()\n\n  useEffect(() => {\n    const fetchNftData = async () => {\n      const metadata = await getNftApi(collectionAddress, tokenId)\n      const [marketData] = await getNftsMarketData({ collection: collectionAddress.toLowerCase(), tokenId }, 1)\n      setNft({\n        tokenId,\n        collectionAddress,\n        collectionName: metadata.collection.name,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image,\n        attributes: metadata.attributes,\n        marketData,\n      })\n    }\n    if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n      const nftOwnedByConnectedUser = userNfts.find(\n        (userNft) =>\n          userNft.collectionAddress.toLowerCase() === collectionAddress.toLowerCase() && userNft.tokenId === tokenId,\n      )\n      if (nftOwnedByConnectedUser) {\n        // If user is the owner we already have all needed data available\n        setNft(nftOwnedByConnectedUser)\n        setIsOwnNft(true)\n      } else {\n        // reset to defaults\n        setIsOwnNft(false)\n        // Get metadata and market data separately if connected user is not the owner\n        fetchNftData()\n      }\n    }\n    if (!account) {\n      fetchNftData()\n    }\n  }, [userNfts, collectionAddress, tokenId, userNftsInitializationState, account])\n\n  if (!nft) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const properties = nft.attributes\n\n  const userProfilePicture = userNfts.find((userNft) => userNft.location === NftLocation.PROFILE)\n  const nftIsProfilePic = userProfilePicture\n    ? nft.tokenId === userProfilePicture.tokenId && nft.collectionAddress === userProfilePicture.collectionAddress\n    : false\n\n  const getAttributesRarity = () => {\n    if (distributionData && !isFetchingDistribution) {\n      return Object.keys(distributionData).reduce((rarityMap, traitType) => {\n        const total = sum(Object.values(distributionData[traitType]))\n        const nftAttributeValue = nft.attributes.find((attribute) => attribute.traitType === traitType)?.value\n        const count = distributionData[traitType][nftAttributeValue]\n        const rarity = (count / total) * 100\n        return {\n          ...rarityMap,\n          [traitType]: rarity,\n        }\n      }, {})\n    }\n    return {}\n  }\n\n  return (\n    <Page>\n      <MainNFTCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManageNFTsCard\n            nft={nft}\n            isOwnNft={isOwnNft}\n            isLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\n          />\n          <PropertiesCard properties={properties} rarity={getAttributesRarity()} />\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={nft?.marketData?.metadataUrl} />\n        </Flex>\n        <OwnerCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection collectionAddress={collectionAddress} currentTokenName={nft.name} />\n    </Page>\n  )\n}\n\nexport default IndividualNFTPage\n","import React from 'react'\nimport { useParams } from 'react-router'\nimport { pancakeBunniesAddress } from '../../constants'\nimport IndividualPancakeBunnyPage from './PancakeBunnyPage'\nimport IndividualNFTPage from './OneOfAKindNftPage'\n\nconst IndividualNFTPageRouter = () => {\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\n\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n  if (isPBCollection) {\n    return <IndividualPancakeBunnyPage bunnyId={tokenId} />\n  }\n\n  return <IndividualNFTPage collectionAddress={collectionAddress} tokenId={tokenId} />\n}\n\nexport default IndividualNFTPageRouter\n"],"sourceRoot":""}